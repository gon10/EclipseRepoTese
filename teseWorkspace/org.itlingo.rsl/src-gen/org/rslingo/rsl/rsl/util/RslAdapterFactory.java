/**
 * generated by Xtext 2.10.0
 */
package org.rslingo.rsl.rsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.rslingo.rsl.rsl.Actor;
import org.rslingo.rsl.rsl.Attribute;
import org.rslingo.rsl.rsl.Check;
import org.rslingo.rsl.rsl.DataEntity;
import org.rslingo.rsl.rsl.DataEntityView;
import org.rslingo.rsl.rsl.Date;
import org.rslingo.rsl.rsl.DetailDEntity;
import org.rslingo.rsl.rsl.ForeignKey;
import org.rslingo.rsl.rsl.IfStep;
import org.rslingo.rsl.rsl.Import;
import org.rslingo.rsl.rsl.MasterDEntity;
import org.rslingo.rsl.rsl.Model;
import org.rslingo.rsl.rsl.Month;
import org.rslingo.rsl.rsl.Multiplicity;
import org.rslingo.rsl.rsl.PackageAbstract;
import org.rslingo.rsl.rsl.PackageSystem;
import org.rslingo.rsl.rsl.PrimaryKey;
import org.rslingo.rsl.rsl.RefActor;
import org.rslingo.rsl.rsl.RefAttribute;
import org.rslingo.rsl.rsl.RefDEntity;
import org.rslingo.rsl.rsl.RefSystem;
import org.rslingo.rsl.rsl.RefUC;
import org.rslingo.rsl.rsl.RefUCAction;
import org.rslingo.rsl.rsl.ReferenceDEntity;
import org.rslingo.rsl.rsl.Requirement;
import org.rslingo.rsl.rsl.RequirementRelation;
import org.rslingo.rsl.rsl.RslPackage;
import org.rslingo.rsl.rsl.Scenario;
import org.rslingo.rsl.rsl.SimpleStep;
import org.rslingo.rsl.rsl.State;
import org.rslingo.rsl.rsl.StateMachine;
import org.rslingo.rsl.rsl.States;
import org.rslingo.rsl.rsl.Step;
import org.rslingo.rsl.rsl.SystemRelation;
import org.rslingo.rsl.rsl.SystemRequirement;
import org.rslingo.rsl.rsl.UCAction;
import org.rslingo.rsl.rsl.UCActions;
import org.rslingo.rsl.rsl.UCExtends;
import org.rslingo.rsl.rsl.UCExtensionPoint;
import org.rslingo.rsl.rsl.UCExtensionPoints;
import org.rslingo.rsl.rsl.UCIncludes;
import org.rslingo.rsl.rsl.UseCase;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.rslingo.rsl.rsl.RslPackage
 * @generated
 */
public class RslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RslSwitch<Adapter> modelSwitch =
    new RslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePackageAbstract(PackageAbstract object)
      {
        return createPackageAbstractAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseDate(Date object)
      {
        return createDateAdapter();
      }
      @Override
      public Adapter caseMonth(Month object)
      {
        return createMonthAdapter();
      }
      @Override
      public Adapter casePackageSystem(PackageSystem object)
      {
        return createPackageSystemAdapter();
      }
      @Override
      public Adapter caseSystem(org.rslingo.rsl.rsl.System object)
      {
        return createSystemAdapter();
      }
      @Override
      public Adapter caseRefSystem(RefSystem object)
      {
        return createRefSystemAdapter();
      }
      @Override
      public Adapter caseSystemRelation(SystemRelation object)
      {
        return createSystemRelationAdapter();
      }
      @Override
      public Adapter caseDataEntity(DataEntity object)
      {
        return createDataEntityAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseMultiplicity(Multiplicity object)
      {
        return createMultiplicityAdapter();
      }
      @Override
      public Adapter casePrimaryKey(PrimaryKey object)
      {
        return createPrimaryKeyAdapter();
      }
      @Override
      public Adapter caseForeignKey(ForeignKey object)
      {
        return createForeignKeyAdapter();
      }
      @Override
      public Adapter caseRefAttribute(RefAttribute object)
      {
        return createRefAttributeAdapter();
      }
      @Override
      public Adapter caseCheck(Check object)
      {
        return createCheckAdapter();
      }
      @Override
      public Adapter caseDataEntityView(DataEntityView object)
      {
        return createDataEntityViewAdapter();
      }
      @Override
      public Adapter caseMasterDEntity(MasterDEntity object)
      {
        return createMasterDEntityAdapter();
      }
      @Override
      public Adapter caseDetailDEntity(DetailDEntity object)
      {
        return createDetailDEntityAdapter();
      }
      @Override
      public Adapter caseReferenceDEntity(ReferenceDEntity object)
      {
        return createReferenceDEntityAdapter();
      }
      @Override
      public Adapter caseRefDEntity(RefDEntity object)
      {
        return createRefDEntityAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseSystemRequirement(SystemRequirement object)
      {
        return createSystemRequirementAdapter();
      }
      @Override
      public Adapter caseRequirementRelation(RequirementRelation object)
      {
        return createRequirementRelationAdapter();
      }
      @Override
      public Adapter caseUseCase(UseCase object)
      {
        return createUseCaseAdapter();
      }
      @Override
      public Adapter caseRefActor(RefActor object)
      {
        return createRefActorAdapter();
      }
      @Override
      public Adapter caseUCActions(UCActions object)
      {
        return createUCActionsAdapter();
      }
      @Override
      public Adapter caseUCAction(UCAction object)
      {
        return createUCActionAdapter();
      }
      @Override
      public Adapter caseUCIncludes(UCIncludes object)
      {
        return createUCIncludesAdapter();
      }
      @Override
      public Adapter caseUCExtends(UCExtends object)
      {
        return createUCExtendsAdapter();
      }
      @Override
      public Adapter caseUCExtensionPoints(UCExtensionPoints object)
      {
        return createUCExtensionPointsAdapter();
      }
      @Override
      public Adapter caseUCExtensionPoint(UCExtensionPoint object)
      {
        return createUCExtensionPointAdapter();
      }
      @Override
      public Adapter caseRefUC(RefUC object)
      {
        return createRefUCAdapter();
      }
      @Override
      public Adapter caseScenario(Scenario object)
      {
        return createScenarioAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseSimpleStep(SimpleStep object)
      {
        return createSimpleStepAdapter();
      }
      @Override
      public Adapter caseIfStep(IfStep object)
      {
        return createIfStepAdapter();
      }
      @Override
      public Adapter caseStateMachine(StateMachine object)
      {
        return createStateMachineAdapter();
      }
      @Override
      public Adapter caseStates(States object)
      {
        return createStatesAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseRefUCAction(RefUCAction object)
      {
        return createRefUCActionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.PackageAbstract <em>Package Abstract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.PackageAbstract
   * @generated
   */
  public Adapter createPackageAbstractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Date <em>Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Date
   * @generated
   */
  public Adapter createDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Month <em>Month</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Month
   * @generated
   */
  public Adapter createMonthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.PackageSystem <em>Package System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.PackageSystem
   * @generated
   */
  public Adapter createPackageSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.System <em>System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.System
   * @generated
   */
  public Adapter createSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefSystem <em>Ref System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefSystem
   * @generated
   */
  public Adapter createRefSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.SystemRelation <em>System Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.SystemRelation
   * @generated
   */
  public Adapter createSystemRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.DataEntity <em>Data Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.DataEntity
   * @generated
   */
  public Adapter createDataEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Multiplicity <em>Multiplicity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Multiplicity
   * @generated
   */
  public Adapter createMultiplicityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.PrimaryKey <em>Primary Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.PrimaryKey
   * @generated
   */
  public Adapter createPrimaryKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.ForeignKey <em>Foreign Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.ForeignKey
   * @generated
   */
  public Adapter createForeignKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefAttribute <em>Ref Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefAttribute
   * @generated
   */
  public Adapter createRefAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Check <em>Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Check
   * @generated
   */
  public Adapter createCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.DataEntityView <em>Data Entity View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.DataEntityView
   * @generated
   */
  public Adapter createDataEntityViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.MasterDEntity <em>Master DEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.MasterDEntity
   * @generated
   */
  public Adapter createMasterDEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.DetailDEntity <em>Detail DEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.DetailDEntity
   * @generated
   */
  public Adapter createDetailDEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.ReferenceDEntity <em>Reference DEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.ReferenceDEntity
   * @generated
   */
  public Adapter createReferenceDEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefDEntity <em>Ref DEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefDEntity
   * @generated
   */
  public Adapter createRefDEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.SystemRequirement <em>System Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.SystemRequirement
   * @generated
   */
  public Adapter createSystemRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RequirementRelation <em>Requirement Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RequirementRelation
   * @generated
   */
  public Adapter createRequirementRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UseCase <em>Use Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UseCase
   * @generated
   */
  public Adapter createUseCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefActor <em>Ref Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefActor
   * @generated
   */
  public Adapter createRefActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCActions <em>UC Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCActions
   * @generated
   */
  public Adapter createUCActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCAction <em>UC Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCAction
   * @generated
   */
  public Adapter createUCActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCIncludes <em>UC Includes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCIncludes
   * @generated
   */
  public Adapter createUCIncludesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCExtends <em>UC Extends</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCExtends
   * @generated
   */
  public Adapter createUCExtendsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCExtensionPoints <em>UC Extension Points</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCExtensionPoints
   * @generated
   */
  public Adapter createUCExtensionPointsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.UCExtensionPoint <em>UC Extension Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.UCExtensionPoint
   * @generated
   */
  public Adapter createUCExtensionPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefUC <em>Ref UC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefUC
   * @generated
   */
  public Adapter createRefUCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Scenario <em>Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Scenario
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.SimpleStep <em>Simple Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.SimpleStep
   * @generated
   */
  public Adapter createSimpleStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.IfStep <em>If Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.IfStep
   * @generated
   */
  public Adapter createIfStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.StateMachine <em>State Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.StateMachine
   * @generated
   */
  public Adapter createStateMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.States <em>States</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.States
   * @generated
   */
  public Adapter createStatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.rslingo.rsl.rsl.RefUCAction <em>Ref UC Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.rslingo.rsl.rsl.RefUCAction
   * @generated
   */
  public Adapter createRefUCActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RslAdapterFactory
