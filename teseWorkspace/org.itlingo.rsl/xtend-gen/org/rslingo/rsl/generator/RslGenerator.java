/**
 * generated by Xtext 2.10.0
 */
package org.rslingo.rsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL.AppDbContext;
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL.Models.CreateEntitiesLinks;
import org.rslingo.rsl.rsl.Actor;
import org.rslingo.rsl.rsl.ActorType;
import org.rslingo.rsl.rsl.Attribute;
import org.rslingo.rsl.rsl.AttributeType;
import org.rslingo.rsl.rsl.Check;
import org.rslingo.rsl.rsl.DataEntity;
import org.rslingo.rsl.rsl.DataEntityView;
import org.rslingo.rsl.rsl.ForeignKey;
import org.rslingo.rsl.rsl.MasterDEntity;
import org.rslingo.rsl.rsl.PrimaryKey;
import org.rslingo.rsl.rsl.RefAttribute;
import org.rslingo.rsl.rsl.UCAction;
import org.rslingo.rsl.rsl.UCActions;
import org.rslingo.rsl.rsl.UseCase;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RslGenerator extends AbstractGenerator {
  private ArrayList<DataEntity> entities = new ArrayList<DataEntity>();
  
  private ArrayList<UseCase> useCases = new ArrayList<UseCase>();
  
  private ArrayList<String> oneToMany1 = new ArrayList<String>();
  
  private ArrayList<String> oneToMany2 = new ArrayList<String>();
  
  private ArrayList<String> oneToOneOrZero1 = new ArrayList<String>();
  
  private ArrayList<String> oneToOneOrZero2 = new ArrayList<String>();
  
  private ArrayList<String> ManyToMany1 = new ArrayList<String>();
  
  private ArrayList<String> ManyToMany2 = new ArrayList<String>();
  
  private CreateEntitiesLinks cel = new CreateEntitiesLinks("manelasdasdasd");
  
  private int i = 0;
  
  private boolean pode = false;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Actor> _filter = Iterables.<Actor>filter(_iterable, Actor.class);
    for (final Actor e : _filter) {
      String _name = e.getName();
      String _plus = ("actors/" + _name);
      String _plus_1 = (_plus + ".java");
      CharSequence _compile = this.compile(e);
      fsa.generateFile(_plus_1, _compile);
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<DataEntity> _filter_1 = Iterables.<DataEntity>filter(_iterable_1, DataEntity.class);
    for (final DataEntity e_1 : _filter_1) {
      {
        this.createEntityLinks(e_1);
        this.entities.add(e_1);
        for (final String onem1 : this.oneToMany1) {
          {
            InputOutput.<String>println("onem1-----------------");
            InputOutput.<String>println(onem1);
          }
        }
        for (final String onem2 : this.oneToMany2) {
          {
            InputOutput.<String>println("onem2-----------------");
            InputOutput.<String>println(onem2);
          }
        }
        for (final String one1 : this.oneToOneOrZero1) {
          {
            InputOutput.<String>println("one1-----------------");
            InputOutput.<String>println(one1);
          }
        }
        for (final String one2 : this.oneToOneOrZero2) {
          {
            InputOutput.<String>println("one2-----------------");
            InputOutput.<String>println(one2);
          }
        }
        for (final String many1 : this.ManyToMany1) {
          {
            InputOutput.<String>println("many1-----------------");
            InputOutput.<String>println(many1);
          }
        }
        for (final String many2 : this.ManyToMany2) {
          {
            InputOutput.<String>println("many2-----------------");
            InputOutput.<String>println(many2);
          }
        }
        InputOutput.<String>println("___________________________");
        InputOutput.<String>println("___________________________");
      }
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<DataEntity> _filter_2 = Iterables.<DataEntity>filter(_iterable_2, DataEntity.class);
    for (final DataEntity e_2 : _filter_2) {
      String _name_1 = e_2.getName();
      String _plus_2 = ("ASP.NETCoreAngular2/DAL/Models/" + _name_1);
      String _plus_3 = (_plus_2 + ".cs");
      CharSequence _compileEntities = this.compileEntities(e_2, this.oneToOneOrZero1, this.oneToOneOrZero2, this.oneToMany1, this.oneToMany2);
      fsa.generateFile(_plus_3, _compileEntities);
    }
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<DataEntity> _filter_3 = Iterables.<DataEntity>filter(_iterable_3, DataEntity.class);
    for (final DataEntity e_3 : _filter_3) {
      String _name_2 = e_3.getName();
      String _plus_4 = ("ASP.NETCoreAngular2/ViewModels/" + _name_2);
      String _plus_5 = (_plus_4 + "ViewModel.cs");
      CharSequence _compileViewModels = this.compileViewModels(e_3, this.oneToOneOrZero1, this.oneToOneOrZero2, this.oneToMany1, this.oneToMany2);
      fsa.generateFile(_plus_5, _compileViewModels);
    }
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<UseCase> _filter_4 = Iterables.<UseCase>filter(_iterable_4, UseCase.class);
    for (final UseCase uc : _filter_4) {
      this.useCases.add(uc);
    }
    CharSequence _compileApplicationPermissions = this.compileApplicationPermissions(this.useCases);
    fsa.generateFile(
      "ASP.NETCoreAngular2/DAL/Core/ApplicationPermissions.cs", _compileApplicationPermissions);
    CharSequence _compileAppDb = this.compileAppDb(this.entities, this.oneToOneOrZero1, this.oneToOneOrZero2, this.oneToMany1, this.oneToMany2);
    fsa.generateFile(
      ("ASP.NETCoreAngular2/DAL/ApplicationDbContext" + ".cs"), _compileAppDb);
    CharSequence _compileDatabaseInitializer = this.compileDatabaseInitializer(this.useCases);
    fsa.generateFile(
      "ASP.NETCoreAngular2/DAL/DatabaseInitializer.cs", _compileDatabaseInitializer);
    this.oneToMany1.clear();
    this.oneToMany2.clear();
    this.oneToOneOrZero1.clear();
    this.oneToOneOrZero2.clear();
    this.ManyToMany1.clear();
    this.ManyToMany2.clear();
  }
  
  public CharSequence compileDatabaseInitializer(final ArrayList<UseCase> cases) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ====================================================");
    _builder.newLine();
    _builder.append("// More Templates: https://www.ebenmonney.com/templates");
    _builder.newLine();
    _builder.append("// Email: support@ebenmonney.com");
    _builder.newLine();
    _builder.append("// ====================================================");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using DAL.Models;");
    _builder.newLine();
    _builder.append("using Microsoft.AspNetCore.Identity;");
    _builder.newLine();
    _builder.append("using Microsoft.EntityFrameworkCore;");
    _builder.newLine();
    _builder.append("using Microsoft.Extensions.Logging;");
    _builder.newLine();
    _builder.append("using System;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using System.Linq;");
    _builder.newLine();
    _builder.append("using System.Text;");
    _builder.newLine();
    _builder.append("using System.Threading.Tasks;");
    _builder.newLine();
    _builder.append("using DAL.Core;");
    _builder.newLine();
    _builder.append("using DAL.Core.Interfaces;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace DAL");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public interface IDatabaseInitializer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Task SeedAsync();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class DatabaseInitializer : IDatabaseInitializer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly ApplicationDbContext _context;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly IAccountManager _accountManager;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly ILogger _logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public DatabaseInitializer(ApplicationDbContext context, IAccountManager accountManager, ILogger<DatabaseInitializer> logger)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_accountManager = accountManager;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_context = context;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_logger = logger;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task SeedAsync()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _context.Database.MigrateAsync().ConfigureAwait(false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!await _context.Users.AnyAsync())");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("_logger.LogInformation(\"Generating inbuilt accounts\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const string adminRoleName = \"administrator\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const string userRoleName = \"user\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//________feito por mim");
    _builder.newLine();
    _builder.append("                ");
    ArrayList<String> actorsUsed = new ArrayList<String>();
    _builder.newLineIfNotEmpty();
    {
      for(final UseCase uc : this.useCases) {
        {
          Actor _actorInitiates = uc.getActorInitiates();
          String _name = _actorInitiates.getName();
          boolean _contains = actorsUsed.contains(_name);
          boolean _not = (!_contains);
          if (_not) {
            _builder.append("               \t");
            _builder.append("const string ");
            Actor _actorInitiates_1 = uc.getActorInitiates();
            String _name_1 = _actorInitiates_1.getName();
            _builder.append(_name_1, "               \t");
            _builder.append("RoleName = \"");
            Actor _actorInitiates_2 = uc.getActorInitiates();
            String _name_2 = _actorInitiates_2.getName();
            String _lowerCase = _name_2.toLowerCase();
            _builder.append(_lowerCase, "               \t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("               \t");
            String _xblockexpression = null;
            {
              Actor _actorInitiates_3 = uc.getActorInitiates();
              String _name_3 = _actorInitiates_3.getName();
              actorsUsed.add(_name_3);
              _xblockexpression = "";
            }
            _builder.append(_xblockexpression, "               \t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("              \t");
    _builder.append("//________");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("await EnsureRoleAsync(adminRoleName, \"Default administrator\", ApplicationPermissions.GetAllPermissionValues());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("await EnsureRoleAsync(userRoleName, \"Default user\", new string[] { });");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("               \t");
    _builder.append("//________feito por mim");
    _builder.newLine();
    _builder.append("               \t");
    ArrayList<String> actorsNamesOnUseCases = new ArrayList<String>();
    _builder.newLineIfNotEmpty();
    {
      for(final UseCase uc_1 : this.useCases) {
        {
          Actor _actorInitiates_3 = uc_1.getActorInitiates();
          String _name_3 = _actorInitiates_3.getName();
          boolean _contains_1 = actorsNamesOnUseCases.contains(_name_3);
          boolean _not_1 = (!_contains_1);
          if (_not_1) {
            String _xblockexpression_1 = null;
            {
              Actor _actorInitiates_4 = uc_1.getActorInitiates();
              String _name_4 = _actorInitiates_4.getName();
              actorsNamesOnUseCases.add(_name_4);
              _xblockexpression_1 = "";
            }
            _builder.append(_xblockexpression_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("               \t");
    ArrayList<String> actionsToBeUsedByActor = new ArrayList<String>();
    _builder.newLineIfNotEmpty();
    _builder.append("               \t");
    HashMap<String, ArrayList<String>> actorActionMap = new HashMap<String, ArrayList<String>>();
    _builder.newLineIfNotEmpty();
    {
      for(final String actor : actorsNamesOnUseCases) {
        {
          for(final UseCase uc_2 : this.useCases) {
            {
              Actor _actorInitiates_4 = uc_2.getActorInitiates();
              String _name_4 = _actorInitiates_4.getName();
              boolean _equals = Objects.equal(actor, _name_4);
              if (_equals) {
                {
                  UCActions _actions = uc_2.getActions();
                  EList<UCAction> _actions_1 = _actions.getActions();
                  for(final UCAction action : _actions_1) {
                    {
                      String _name_5 = action.getName();
                      String _plus = (_name_5 + " ");
                      DataEntityView _dEntityView = uc_2.getDEntityView();
                      MasterDEntity _master = _dEntityView.getMaster();
                      DataEntity _masterDEntity = _master.getMasterDEntity();
                      String _name_6 = _masterDEntity.getName();
                      String _plus_1 = (_plus + _name_6);
                      boolean _contains_2 = actionsToBeUsedByActor.contains(_plus_1);
                      boolean _not_2 = (!_contains_2);
                      if (_not_2) {
                        String _xblockexpression_2 = null;
                        {
                          String _name_7 = action.getName();
                          String _plus_2 = (_name_7 + " ");
                          DataEntityView _dEntityView_1 = uc_2.getDEntityView();
                          MasterDEntity _master_1 = _dEntityView_1.getMaster();
                          DataEntity _masterDEntity_1 = _master_1.getMasterDEntity();
                          String _name_8 = _masterDEntity_1.getName();
                          String _plus_3 = (_plus_2 + _name_8);
                          actionsToBeUsedByActor.add(_plus_3);
                          _xblockexpression_2 = "";
                        }
                        _builder.append(_xblockexpression_2, "");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ArrayList<String> tempactionsToBeUsedByActor = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        {
          for(final String action_1 : actionsToBeUsedByActor) {
            String _xblockexpression_3 = null;
            {
              tempactionsToBeUsedByActor.add(action_1);
              _xblockexpression_3 = "";
            }
            _builder.append(_xblockexpression_3, "");
            _builder.newLineIfNotEmpty();
          }
        }
        String _xblockexpression_4 = null;
        {
          String _string = actor.toString();
          actorActionMap.put(_string, tempactionsToBeUsedByActor);
          _xblockexpression_4 = "";
        }
        _builder.append(_xblockexpression_4, "");
        _builder.newLineIfNotEmpty();
        String _xblockexpression_5 = null;
        {
          actionsToBeUsedByActor.clear();
          _xblockexpression_5 = "";
        }
        _builder.append(_xblockexpression_5, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Set<Map.Entry<String, ArrayList<String>>> _entrySet = actorActionMap.entrySet();
      for(final Map.Entry<String, ArrayList<String>> mapEntry : _entrySet) {
        _builder.append("               \t");
        _builder.append("await EnsureRoleAsync(");
        String _key = mapEntry.getKey();
        _builder.append(_key, "               \t");
        _builder.append("RoleName, \"Default ");
        String _key_1 = mapEntry.getKey();
        _builder.append(_key_1, "               \t");
        _builder.append("\", new string[] { ");
        {
          ArrayList<String> _value = mapEntry.getValue();
          for(final String action_2 : _value) {
            String splitString = " ";
            String[] _split = action_2.split(splitString);
            Iterator<String> segments = ((List<String>)Conversions.doWrapArray(_split)).iterator();
            _builder.append(" ");
            String segmentsHead = IteratorExtensions.<String>head(segments);
            _builder.append(" ");
            {
              boolean _equals_1 = Objects.equal(segmentsHead, "Search");
              if (_equals_1) {
                _builder.append("ApplicationPermissions.GetPermissionByName(\"");
                _builder.append(action_2, "               \t");
                _builder.append("s\").Value,");
              } else {
                boolean _equals_2 = Objects.equal(segmentsHead, "Create");
                if (_equals_2) {
                  _builder.append("ApplicationPermissions.GetPermissionByName(\"");
                  _builder.append(action_2, "               \t");
                  _builder.append("s\").Value,");
                } else {
                  boolean _equals_3 = Objects.equal(segmentsHead, "View");
                  if (_equals_3) {
                    _builder.append("ApplicationPermissions.GetPermissionByName(\"");
                    _builder.append(action_2, "               \t");
                    _builder.append("s\").Value,");
                  } else {
                    boolean _equals_4 = Objects.equal(segmentsHead, "Update");
                    if (_equals_4) {
                      _builder.append("ApplicationPermissions.GetPermissionByName(\"");
                      _builder.append(action_2, "               \t");
                      _builder.append("s\").Value,");
                    } else {
                      boolean _equals_5 = Objects.equal(segmentsHead, "Delete");
                      if (_equals_5) {
                        _builder.append("ApplicationPermissions.GetPermissionByName(\"");
                        _builder.append(action_2, "               \t");
                        _builder.append("s\").Value,");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("               \t");
    _builder.append("//________");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("await CreateUserAsync(\"admin\", \"tempP@ss123\", \"Inbuilt Administrator\", \"admin@ebenmonney.com\", \"+1 (123) 000-0000\", new string[] { adminRoleName });");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("await CreateUserAsync(\"user\", \"tempP@ss123\", \"Inbuilt Standard User\", \"user@ebenmonney.com\", \"+1 (123) 000-0001\", new string[] { userRoleName });");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("_logger.LogInformation(\"Inbuilt account generation completed\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private async Task EnsureRoleAsync(string roleName, string description, string[] claims)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if ((await _accountManager.GetRoleByNameAsync(roleName)) == null)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ApplicationRole applicationRole = new ApplicationRole(roleName, description);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("var result = await this._accountManager.CreateRoleAsync(applicationRole, claims);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!result.Item1)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("throw new Exception($\"Seeding \\\"{description}\\\" role failed. Errors: {string.Join(Environment.NewLine, result.Item2)}\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private async Task<ApplicationUser> CreateUserAsync(string userName, string password, string fullName, string email, string phoneNumber, string[] roles)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ApplicationUser applicationUser = new ApplicationUser");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("UserName = userName,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("FullName = fullName,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Email = email,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("PhoneNumber = phoneNumber,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("EmailConfirmed = true,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("IsEnabled = true");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var result = await _accountManager.CreateUserAsync(applicationUser, roles, password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!result.Item1)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw new Exception($\"Seeding \\\"{userName}\\\" user failed. Errors: {string.Join(Environment.NewLine, result.Item2)}\");");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return applicationUser;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileApplicationPermissions(final ArrayList<UseCase> useCases) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ====================================================");
    _builder.newLine();
    _builder.append("// More Templates: https://www.ebenmonney.com/templates");
    _builder.newLine();
    _builder.append("// Email: support@ebenmonney.com");
    _builder.newLine();
    _builder.append("// ====================================================");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using System;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using System.Linq;");
    _builder.newLine();
    _builder.append("using System.Text;");
    _builder.newLine();
    _builder.append("using System.Threading.Tasks;");
    _builder.newLine();
    _builder.append("using System.Collections.ObjectModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace DAL.Core");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static class ApplicationPermissions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ReadOnlyCollection<ApplicationPermission> AllPermissions;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public const string UsersPermissionGroupName = \"User Permissions\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission ViewUsers = new ApplicationPermission(\"View Users\", \"users.view\", UsersPermissionGroupName, \"Permission to view other users account details\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission ManageUsers = new ApplicationPermission(\"Manage Users\", \"users.manage\", UsersPermissionGroupName, \"Permission to create, delete and modify other users account details\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public const string RolesPermissionGroupName = \"Role Permissions\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission ViewRoles = new ApplicationPermission(\"View Roles\", \"roles.view\", RolesPermissionGroupName, \"Permission to view available roles\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission ManageRoles = new ApplicationPermission(\"Manage Roles\", \"roles.manage\", RolesPermissionGroupName, \"Permission to create, delete and modify roles\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission AssignRoles = new ApplicationPermission(\"Assign Roles\", \"roles.assign\", RolesPermissionGroupName, \"Permission to assign roles to users\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//feito por mim");
    _builder.newLine();
    _builder.append("\t\t");
    ArrayList<String> entitiesUsed = CollectionLiterals.<String>newArrayList();
    _builder.newLineIfNotEmpty();
    {
      for(final UseCase uc : useCases) {
        {
          DataEntityView _dEntityView = uc.getDEntityView();
          MasterDEntity _master = _dEntityView.getMaster();
          DataEntity _masterDEntity = _master.getMasterDEntity();
          String _name = _masterDEntity.getName();
          boolean _contains = entitiesUsed.contains(_name);
          boolean _not = (!_contains);
          if (_not) {
            _builder.append("\t\t");
            _builder.append("public const string ");
            DataEntityView _dEntityView_1 = uc.getDEntityView();
            MasterDEntity _master_1 = _dEntityView_1.getMaster();
            DataEntity _masterDEntity_1 = _master_1.getMasterDEntity();
            String _name_1 = _masterDEntity_1.getName();
            _builder.append(_name_1, "\t\t");
            _builder.append("sPermissionGroupName = \"");
            DataEntityView _dEntityView_2 = uc.getDEntityView();
            MasterDEntity _master_2 = _dEntityView_2.getMaster();
            DataEntity _masterDEntity_2 = _master_2.getMasterDEntity();
            String _name_2 = _masterDEntity_2.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append(" Permissions\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("public static ApplicationPermission View");
            DataEntityView _dEntityView_3 = uc.getDEntityView();
            MasterDEntity _master_3 = _dEntityView_3.getMaster();
            DataEntity _masterDEntity_3 = _master_3.getMasterDEntity();
            String _name_3 = _masterDEntity_3.getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("s = new ApplicationPermission(\"View ");
            DataEntityView _dEntityView_4 = uc.getDEntityView();
            MasterDEntity _master_4 = _dEntityView_4.getMaster();
            DataEntity _masterDEntity_4 = _master_4.getMasterDEntity();
            String _name_4 = _masterDEntity_4.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("s\", \"");
            DataEntityView _dEntityView_5 = uc.getDEntityView();
            MasterDEntity _master_5 = _dEntityView_5.getMaster();
            DataEntity _masterDEntity_5 = _master_5.getMasterDEntity();
            String _name_5 = _masterDEntity_5.getName();
            String _lowerCase = _name_5.toLowerCase();
            _builder.append(_lowerCase, "\t\t");
            _builder.append("s.view\", ");
            DataEntityView _dEntityView_6 = uc.getDEntityView();
            MasterDEntity _master_6 = _dEntityView_6.getMaster();
            DataEntity _masterDEntity_6 = _master_6.getMasterDEntity();
            String _name_6 = _masterDEntity_6.getName();
            _builder.append(_name_6, "\t\t");
            _builder.append("sPermissionGroupName, \"Permission to view\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("public static ApplicationPermission Search");
            DataEntityView _dEntityView_7 = uc.getDEntityView();
            MasterDEntity _master_7 = _dEntityView_7.getMaster();
            DataEntity _masterDEntity_7 = _master_7.getMasterDEntity();
            String _name_7 = _masterDEntity_7.getName();
            _builder.append(_name_7, "\t\t");
            _builder.append("s = new ApplicationPermission(\"Search ");
            DataEntityView _dEntityView_8 = uc.getDEntityView();
            MasterDEntity _master_8 = _dEntityView_8.getMaster();
            DataEntity _masterDEntity_8 = _master_8.getMasterDEntity();
            String _name_8 = _masterDEntity_8.getName();
            _builder.append(_name_8, "\t\t");
            _builder.append("s\", \"");
            DataEntityView _dEntityView_9 = uc.getDEntityView();
            MasterDEntity _master_9 = _dEntityView_9.getMaster();
            DataEntity _masterDEntity_9 = _master_9.getMasterDEntity();
            String _name_9 = _masterDEntity_9.getName();
            String _lowerCase_1 = _name_9.toLowerCase();
            _builder.append(_lowerCase_1, "\t\t");
            _builder.append("s.search\", ");
            DataEntityView _dEntityView_10 = uc.getDEntityView();
            MasterDEntity _master_10 = _dEntityView_10.getMaster();
            DataEntity _masterDEntity_10 = _master_10.getMasterDEntity();
            String _name_10 = _masterDEntity_10.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append("sPermissionGroupName, \"Permission to search ");
            DataEntityView _dEntityView_11 = uc.getDEntityView();
            MasterDEntity _master_11 = _dEntityView_11.getMaster();
            DataEntity _masterDEntity_11 = _master_11.getMasterDEntity();
            String _name_11 = _masterDEntity_11.getName();
            String _lowerCase_2 = _name_11.toLowerCase();
            _builder.append(_lowerCase_2, "\t\t");
            _builder.append("s\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("public static ApplicationPermission Create");
            DataEntityView _dEntityView_12 = uc.getDEntityView();
            MasterDEntity _master_12 = _dEntityView_12.getMaster();
            DataEntity _masterDEntity_12 = _master_12.getMasterDEntity();
            String _name_12 = _masterDEntity_12.getName();
            _builder.append(_name_12, "\t\t");
            _builder.append("s = new ApplicationPermission(\"Create ");
            DataEntityView _dEntityView_13 = uc.getDEntityView();
            MasterDEntity _master_13 = _dEntityView_13.getMaster();
            DataEntity _masterDEntity_13 = _master_13.getMasterDEntity();
            String _name_13 = _masterDEntity_13.getName();
            _builder.append(_name_13, "\t\t");
            _builder.append("s\", \"");
            DataEntityView _dEntityView_14 = uc.getDEntityView();
            MasterDEntity _master_14 = _dEntityView_14.getMaster();
            DataEntity _masterDEntity_14 = _master_14.getMasterDEntity();
            String _name_14 = _masterDEntity_14.getName();
            String _lowerCase_3 = _name_14.toLowerCase();
            _builder.append(_lowerCase_3, "\t\t");
            _builder.append("s.create\", ");
            DataEntityView _dEntityView_15 = uc.getDEntityView();
            MasterDEntity _master_15 = _dEntityView_15.getMaster();
            DataEntity _masterDEntity_15 = _master_15.getMasterDEntity();
            String _name_15 = _masterDEntity_15.getName();
            _builder.append(_name_15, "\t\t");
            _builder.append("sPermissionGroupName, \"Permission to create ");
            DataEntityView _dEntityView_16 = uc.getDEntityView();
            MasterDEntity _master_16 = _dEntityView_16.getMaster();
            DataEntity _masterDEntity_16 = _master_16.getMasterDEntity();
            String _name_16 = _masterDEntity_16.getName();
            String _lowerCase_4 = _name_16.toLowerCase();
            _builder.append(_lowerCase_4, "\t\t");
            _builder.append("s\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("public static ApplicationPermission Update");
            DataEntityView _dEntityView_17 = uc.getDEntityView();
            MasterDEntity _master_17 = _dEntityView_17.getMaster();
            DataEntity _masterDEntity_17 = _master_17.getMasterDEntity();
            String _name_17 = _masterDEntity_17.getName();
            _builder.append(_name_17, "\t\t");
            _builder.append("s = new ApplicationPermission(\"Update ");
            DataEntityView _dEntityView_18 = uc.getDEntityView();
            MasterDEntity _master_18 = _dEntityView_18.getMaster();
            DataEntity _masterDEntity_18 = _master_18.getMasterDEntity();
            String _name_18 = _masterDEntity_18.getName();
            _builder.append(_name_18, "\t\t");
            _builder.append("s\", \"");
            DataEntityView _dEntityView_19 = uc.getDEntityView();
            MasterDEntity _master_19 = _dEntityView_19.getMaster();
            DataEntity _masterDEntity_19 = _master_19.getMasterDEntity();
            String _name_19 = _masterDEntity_19.getName();
            String _lowerCase_5 = _name_19.toLowerCase();
            _builder.append(_lowerCase_5, "\t\t");
            _builder.append("s.update\", ");
            DataEntityView _dEntityView_20 = uc.getDEntityView();
            MasterDEntity _master_20 = _dEntityView_20.getMaster();
            DataEntity _masterDEntity_20 = _master_20.getMasterDEntity();
            String _name_20 = _masterDEntity_20.getName();
            _builder.append(_name_20, "\t\t");
            _builder.append("sPermissionGroupName, \"Permission to update ");
            DataEntityView _dEntityView_21 = uc.getDEntityView();
            MasterDEntity _master_21 = _dEntityView_21.getMaster();
            DataEntity _masterDEntity_21 = _master_21.getMasterDEntity();
            String _name_21 = _masterDEntity_21.getName();
            String _lowerCase_6 = _name_21.toLowerCase();
            _builder.append(_lowerCase_6, "\t\t");
            _builder.append("s\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("public static ApplicationPermission Delete");
            DataEntityView _dEntityView_22 = uc.getDEntityView();
            MasterDEntity _master_22 = _dEntityView_22.getMaster();
            DataEntity _masterDEntity_22 = _master_22.getMasterDEntity();
            String _name_22 = _masterDEntity_22.getName();
            _builder.append(_name_22, "\t\t");
            _builder.append("s = new ApplicationPermission(\"Delete ");
            DataEntityView _dEntityView_23 = uc.getDEntityView();
            MasterDEntity _master_23 = _dEntityView_23.getMaster();
            DataEntity _masterDEntity_23 = _master_23.getMasterDEntity();
            String _name_23 = _masterDEntity_23.getName();
            _builder.append(_name_23, "\t\t");
            _builder.append("s\", \"");
            DataEntityView _dEntityView_24 = uc.getDEntityView();
            MasterDEntity _master_24 = _dEntityView_24.getMaster();
            DataEntity _masterDEntity_24 = _master_24.getMasterDEntity();
            String _name_24 = _masterDEntity_24.getName();
            String _lowerCase_7 = _name_24.toLowerCase();
            _builder.append(_lowerCase_7, "\t\t");
            _builder.append("s.delete\", ");
            DataEntityView _dEntityView_25 = uc.getDEntityView();
            MasterDEntity _master_25 = _dEntityView_25.getMaster();
            DataEntity _masterDEntity_25 = _master_25.getMasterDEntity();
            String _name_25 = _masterDEntity_25.getName();
            _builder.append(_name_25, "\t\t");
            _builder.append("sPermissionGroupName, \"Permission to delete ");
            DataEntityView _dEntityView_26 = uc.getDEntityView();
            MasterDEntity _master_26 = _dEntityView_26.getMaster();
            DataEntity _masterDEntity_26 = _master_26.getMasterDEntity();
            String _name_26 = _masterDEntity_26.getName();
            String _lowerCase_8 = _name_26.toLowerCase();
            _builder.append(_lowerCase_8, "\t\t");
            _builder.append("s\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _xblockexpression = null;
            {
              DataEntityView _dEntityView_27 = uc.getDEntityView();
              MasterDEntity _master_27 = _dEntityView_27.getMaster();
              DataEntity _masterDEntity_27 = _master_27.getMasterDEntity();
              String _name_27 = _masterDEntity_27.getName();
              entitiesUsed.add(_name_27);
              _xblockexpression = "";
            }
            _builder.append(_xblockexpression, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("static ApplicationPermissions()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("List<ApplicationPermission> allPermissions = new List<ApplicationPermission>()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ViewUsers,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ManageUsers,");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ViewRoles,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ManageRoles,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("AssignRoles,");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    String _xblockexpression_1 = null;
    {
      entitiesUsed.clear();
      _xblockexpression_1 = "";
    }
    _builder.append(_xblockexpression_1, "                ");
    _builder.newLineIfNotEmpty();
    {
      for(final UseCase uc_1 : useCases) {
        {
          DataEntityView _dEntityView_27 = uc_1.getDEntityView();
          MasterDEntity _master_27 = _dEntityView_27.getMaster();
          DataEntity _masterDEntity_27 = _master_27.getMasterDEntity();
          String _name_27 = _masterDEntity_27.getName();
          boolean _contains_1 = entitiesUsed.contains(_name_27);
          boolean _not_1 = (!_contains_1);
          if (_not_1) {
            _builder.append("                ");
            _builder.append("View");
            DataEntityView _dEntityView_28 = uc_1.getDEntityView();
            MasterDEntity _master_28 = _dEntityView_28.getMaster();
            DataEntity _masterDEntity_28 = _master_28.getMasterDEntity();
            String _name_28 = _masterDEntity_28.getName();
            _builder.append(_name_28, "                ");
            _builder.append("s,");
            _builder.newLineIfNotEmpty();
            _builder.append("                ");
            _builder.append("Search");
            DataEntityView _dEntityView_29 = uc_1.getDEntityView();
            MasterDEntity _master_29 = _dEntityView_29.getMaster();
            DataEntity _masterDEntity_29 = _master_29.getMasterDEntity();
            String _name_29 = _masterDEntity_29.getName();
            _builder.append(_name_29, "                ");
            _builder.append("s,");
            _builder.newLineIfNotEmpty();
            _builder.append("                ");
            _builder.append("Create");
            DataEntityView _dEntityView_30 = uc_1.getDEntityView();
            MasterDEntity _master_30 = _dEntityView_30.getMaster();
            DataEntity _masterDEntity_30 = _master_30.getMasterDEntity();
            String _name_30 = _masterDEntity_30.getName();
            _builder.append(_name_30, "                ");
            _builder.append("s,");
            _builder.newLineIfNotEmpty();
            _builder.append("                ");
            _builder.append("Update");
            DataEntityView _dEntityView_31 = uc_1.getDEntityView();
            MasterDEntity _master_31 = _dEntityView_31.getMaster();
            DataEntity _masterDEntity_31 = _master_31.getMasterDEntity();
            String _name_31 = _masterDEntity_31.getName();
            _builder.append(_name_31, "                ");
            _builder.append("s,");
            _builder.newLineIfNotEmpty();
            _builder.append("                ");
            _builder.append("Delete");
            DataEntityView _dEntityView_32 = uc_1.getDEntityView();
            MasterDEntity _master_32 = _dEntityView_32.getMaster();
            DataEntity _masterDEntity_32 = _master_32.getMasterDEntity();
            String _name_32 = _masterDEntity_32.getName();
            _builder.append(_name_32, "                ");
            _builder.append("s");
            {
              UseCase _last = IterableExtensions.<UseCase>last(useCases);
              boolean _notEquals = (!Objects.equal(uc_1, _last));
              if (_notEquals) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("                ");
            String _xblockexpression_2 = null;
            {
              DataEntityView _dEntityView_33 = uc_1.getDEntityView();
              MasterDEntity _master_33 = _dEntityView_33.getMaster();
              DataEntity _masterDEntity_33 = _master_33.getMasterDEntity();
              String _name_33 = _masterDEntity_33.getName();
              entitiesUsed.add(_name_33);
              _xblockexpression_2 = "";
            }
            _builder.append(_xblockexpression_2, "                ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("                ");
        _builder.newLine();
      }
    }
    _builder.append("                ");
    String _xblockexpression_3 = null;
    {
      entitiesUsed.clear();
      _xblockexpression_3 = "";
    }
    _builder.append(_xblockexpression_3, "                ");
    _builder.append("\t\t                \t\t                ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AllPermissions = allPermissions.AsReadOnly();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission GetPermissionByName(string permissionName)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AllPermissions.Where(p => p.Name == permissionName).FirstOrDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static ApplicationPermission GetPermissionByValue(string permissionValue)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AllPermissions.Where(p => p.Value == permissionValue).FirstOrDefault();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static string[] GetAllPermissionValues()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AllPermissions.Select(p => p.Value).ToArray();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static string[] GetAdministrativePermissionValues()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new string[] { ManageUsers, ManageRoles, AssignRoles };");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class ApplicationPermission");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public ApplicationPermission()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{ }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public ApplicationPermission(string name, string value, string groupName, string description = null)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Value = value;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("GroupName = groupName;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Description = description;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string Name { get; set; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string Value { get; set; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string GroupName { get; set; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string Description { get; set; }");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public override string ToString()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static implicit operator string(ApplicationPermission permission)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return permission.Value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public void createEntityLinks(final DataEntity entity) {
    this.pode = true;
    EList<ForeignKey> _foreignKeys = entity.getForeignKeys();
    for (final ForeignKey fk : _foreignKeys) {
      {
        this.pode = true;
        EList<Check> _checks = entity.getChecks();
        for (final Check check : _checks) {
          {
            String checkExpression = check.getCheckExpression();
            String splitString = "\\(|\\+|\\)";
            String[] _split = checkExpression.split(splitString);
            Iterator<String> segments = ((List<String>)Conversions.doWrapArray(_split)).iterator();
            String _head = IteratorExtensions.<String>head(segments);
            boolean _equals = Objects.equal(_head, "Unique");
            if (_equals) {
              InputOutput.<String>println("___________check________");
              RefAttribute _refTo = fk.getRefTo();
              EList<Attribute> _refAttr = _refTo.getRefAttr();
              Attribute _get = _refAttr.get(0);
              String _name = _get.getName();
              String _head_1 = IteratorExtensions.<String>head(segments);
              boolean _equals_1 = Objects.equal(_name, _head_1);
              if (_equals_1) {
                DataEntity _fentity = fk.getFentity();
                String _name_1 = _fentity.getName();
                this.oneToOneOrZero1.add(_name_1);
                String _name_2 = entity.getName();
                this.oneToOneOrZero2.add(_name_2);
                this.pode = false;
              }
            }
          }
        }
        this.i = 0;
        if (this.pode) {
          DataEntity _fentity = fk.getFentity();
          String _name = _fentity.getName();
          this.oneToMany1.add(_name);
          String _name_1 = entity.getName();
          this.oneToMany2.add(_name_1);
        }
      }
    }
  }
  
  private AppDbContext appDbContext = new AppDbContext(this.entities, this.oneToOneOrZero1, this.oneToOneOrZero2, this.oneToMany1, this.oneToMany2);
  
  public CharSequence compileAppDb(final ArrayList<DataEntity> entities, final ArrayList<String> onetoone1, final ArrayList<String> onetoone2, final ArrayList<String> onetomany1, final ArrayList<String> onetomany2) {
    return this.appDbContext.genAppDbContext();
  }
  
  public CharSequence compile(final Actor actor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = actor.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    {
      String _name_1 = actor.getName();
      boolean _notEquals = (!Objects.equal(_name_1, null));
      if (_notEquals) {
        _builder.append(" private String ");
        String _name_2 = actor.getName();
        _builder.append(_name_2, "\t");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      ActorType _type = actor.getType();
      boolean _notEquals_1 = (!Objects.equal(_type, null));
      if (_notEquals_1) {
        _builder.append(" private String ");
        ActorType _type_1 = actor.getType();
        _builder.append(_type_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      String _nameAlias = actor.getNameAlias();
      boolean _notEquals_2 = (!Objects.equal(_nameAlias, null));
      if (_notEquals_2) {
        _builder.append(" private String ");
        String _nameAlias_1 = actor.getNameAlias();
        _builder.append(_nameAlias_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      Actor _super = actor.getSuper();
      boolean _notEquals_3 = (!Objects.equal(_super, null));
      if (_notEquals_3) {
        _builder.append(" private String ");
        Actor _super_1 = actor.getSuper();
        _builder.append(_super_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      String _description = actor.getDescription();
      boolean _notEquals_4 = (!Objects.equal(_description, null));
      if (_notEquals_4) {
        _builder.append(" private String ");
        String _description_1 = actor.getDescription();
        _builder.append(_description_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEntities(final DataEntity entity, final ArrayList<String> onetoone1, final ArrayList<String> onetoone2, final ArrayList<String> onetomany1, final ArrayList<String> onetomany2) {
    CharSequence _xblockexpression = null;
    {
      int ind = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("using System;");
      _builder.newLine();
      _builder.append("using System.Collections.Generic;");
      _builder.newLine();
      _builder.append("using System.ComponentModel.DataAnnotations;");
      _builder.newLine();
      _builder.append("using System.ComponentModel.DataAnnotations.Schema;");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("namespace DAL.Models");
      _builder.newLine();
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public class ");
      String _name = entity.getName();
      _builder.append(_name, "\t");
      _builder.append(" : AuditableEntity");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public ");
      String _name_1 = entity.getName();
      _builder.append(_name_1, "\t\t");
      _builder.append("()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      boolean entrouNoCheck = false;
      _builder.newLineIfNotEmpty();
      boolean podeUsarKey = true;
      _builder.newLineIfNotEmpty();
      boolean skipPrimaryKey = false;
      _builder.newLineIfNotEmpty();
      {
        EList<Attribute> _attributes = entity.getAttributes();
        for(final Attribute attribute : _attributes) {
          String _xblockexpression_1 = null;
          {
            entrouNoCheck = false;
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1, "");
          _builder.newLineIfNotEmpty();
          {
            EList<Check> _checks = entity.getChecks();
            for(final Check check : _checks) {
              String checkExpression = check.getCheckExpression();
              _builder.newLineIfNotEmpty();
              String splitString = "\\(|\\+|\\)";
              _builder.newLineIfNotEmpty();
              String[] _split = checkExpression.split(splitString);
              Iterator<String> segments = ((List<String>)Conversions.doWrapArray(_split)).iterator();
              _builder.append("\t\t\t\t\t");
              _builder.newLineIfNotEmpty();
              String uniqueHead = IteratorExtensions.<String>head(segments);
              _builder.newLineIfNotEmpty();
              {
                boolean _equals = Objects.equal(uniqueHead, "Unique");
                if (_equals) {
                  _builder.append("\t");
                  String _xblockexpression_2 = null;
                  {
                    podeUsarKey = false;
                    _xblockexpression_2 = "";
                  }
                  _builder.append(_xblockexpression_2, "\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  String realHead = IteratorExtensions.<String>head(segments);
                  _builder.newLineIfNotEmpty();
                  {
                    String _name_2 = attribute.getName();
                    boolean _equals_1 = Objects.equal(realHead, _name_2);
                    if (_equals_1) {
                      {
                        EList<ForeignKey> _foreignKeys = entity.getForeignKeys();
                        for(final ForeignKey foreingKey : _foreignKeys) {
                          {
                            RefAttribute _refTo = foreingKey.getRefTo();
                            EList<Attribute> _refAttr = _refTo.getRefAttr();
                            Attribute _get = _refAttr.get(0);
                            String _name_3 = _get.getName();
                            boolean _equals_2 = Objects.equal(_name_3, realHead);
                            if (_equals_2) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("[Key, ForeignKey(\"");
                              DataEntity _fentity = foreingKey.getFentity();
                              String _name_4 = _fentity.getName();
                              _builder.append(_name_4, "\t\t");
                              _builder.append("\")]");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("public int ");
                              DataEntity _fentity_1 = foreingKey.getFentity();
                              String _name_5 = _fentity_1.getName();
                              _builder.append(_name_5, "\t\t");
                              _builder.append("Id { get; set; }");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("\t");
                      _builder.append("\t");
                      String _xblockexpression_3 = null;
                      {
                        entrouNoCheck = true;
                        _xblockexpression_3 = "";
                      }
                      _builder.append(_xblockexpression_3, "\t\t");
                      _builder.append("\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          {
            if ((entrouNoCheck == false)) {
              {
                if ((podeUsarKey == true)) {
                  {
                    PrimaryKey _primaryKey = entity.getPrimaryKey();
                    RefAttribute _refTo_1 = _primaryKey.getRefTo();
                    EList<Attribute> _refAttr_1 = _refTo_1.getRefAttr();
                    for(final Attribute primarykey : _refAttr_1) {
                      {
                        String _name_6 = primarykey.getName();
                        String _name_7 = attribute.getName();
                        boolean _equals_3 = Objects.equal(_name_6, _name_7);
                        if (_equals_3) {
                          _builder.append("\t\t");
                          _builder.append("[Key]");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
              {
                EList<ForeignKey> _foreignKeys_1 = entity.getForeignKeys();
                for(final ForeignKey fk : _foreignKeys_1) {
                  {
                    RefAttribute _refTo_2 = fk.getRefTo();
                    EList<Attribute> _refAttr_2 = _refTo_2.getRefAttr();
                    Attribute _get_1 = _refAttr_2.get(0);
                    String _name_8 = _get_1.getName();
                    String _name_9 = attribute.getName();
                    boolean _equals_4 = Objects.equal(_name_8, _name_9);
                    if (_equals_4) {
                      _builder.append("\t\t");
                      _builder.append("[ForeignKey(\"");
                      DataEntity _fentity_2 = fk.getFentity();
                      String _name_10 = _fentity_2.getName();
                      _builder.append(_name_10, "\t\t");
                      _builder.append("\")]");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                if ((podeUsarKey == false)) {
                  {
                    PrimaryKey _primaryKey_1 = entity.getPrimaryKey();
                    RefAttribute _refTo_3 = _primaryKey_1.getRefTo();
                    EList<Attribute> _refAttr_3 = _refTo_3.getRefAttr();
                    for(final Attribute primarykey_1 : _refAttr_3) {
                      {
                        String _name_11 = primarykey_1.getName();
                        String _name_12 = attribute.getName();
                        boolean _equals_5 = Objects.equal(_name_11, _name_12);
                        if (_equals_5) {
                          String _xblockexpression_4 = null;
                          {
                            skipPrimaryKey = true;
                            _xblockexpression_4 = "";
                          }
                          _builder.append(_xblockexpression_4, "");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((skipPrimaryKey == false)) {
                  _builder.append("\t\t");
                  _builder.append("public ");
                  {
                    AttributeType _type = attribute.getType();
                    String _string = _type.toString();
                    boolean _equals_6 = Objects.equal(_string, "Integer");
                    if (_equals_6) {
                      _builder.append("int");
                    } else {
                      AttributeType _type_1 = attribute.getType();
                      String _string_1 = _type_1.toString();
                      boolean _equals_7 = Objects.equal(_string_1, "Date");
                      if (_equals_7) {
                        _builder.append("DateTime");
                      } else {
                        AttributeType _type_2 = attribute.getType();
                        _builder.append(_type_2, "\t\t");
                      }
                    }
                  }
                  _builder.append(" ");
                  String _name_13 = attribute.getName();
                  String _firstUpper = StringExtensions.toFirstUpper(_name_13);
                  _builder.append(_firstUpper, "\t\t");
                  _builder.append(" { get; set; }");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("\t\t");
              String _xblockexpression_5 = null;
              {
                skipPrimaryKey = false;
                _xblockexpression_5 = "";
              }
              _builder.append(_xblockexpression_5, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      {
        String _description = entity.getDescription();
        boolean _notEquals = (!Objects.equal(_description, null));
        if (_notEquals) {
          _builder.append("\t\t");
          _builder.append("public String Description { get; set; }");
          _builder.newLine();
        }
      }
      _builder.newLine();
      {
        EList<ForeignKey> _foreignKeys_2 = entity.getForeignKeys();
        for(final ForeignKey foreignKey : _foreignKeys_2) {
          _builder.append("\t\t");
          _builder.append("public ");
          DataEntity _fentity_3 = foreignKey.getFentity();
          String _name_14 = _fentity_3.getName();
          _builder.append(_name_14, "\t\t");
          _builder.append(" ");
          DataEntity _fentity_4 = foreignKey.getFentity();
          String _name_15 = _fentity_4.getName();
          _builder.append(_name_15, "\t\t");
          _builder.append(" { get; set; }");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.newLine();
      {
        for(final String otz : this.oneToOneOrZero1) {
          {
            String _name_16 = entity.getName();
            boolean _equals_8 = Objects.equal(_name_16, otz);
            if (_equals_8) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("public ");
              String _get_2 = this.oneToOneOrZero2.get(ind);
              _builder.append(_get_2, "\t\t");
              _builder.append(" ");
              String _get_3 = this.oneToOneOrZero2.get(ind);
              _builder.append(_get_3, "\t\t");
              _builder.append(" { get; set; }");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          String _xblockexpression_6 = null;
          {
            ind = (ind + 1);
            _xblockexpression_6 = "";
          }
          _builder.append(_xblockexpression_6, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      String _xblockexpression_7 = null;
      {
        ind = 0;
        _xblockexpression_7 = "";
      }
      _builder.append(_xblockexpression_7, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      {
        for(final String otm1 : onetomany1) {
          {
            String _name_17 = entity.getName();
            boolean _equals_9 = Objects.equal(_name_17, otm1);
            if (_equals_9) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("public ICollection<");
              String _get_4 = onetomany2.get(ind);
              _builder.append(_get_4, "\t\t");
              _builder.append("> ");
              String _get_5 = onetomany2.get(ind);
              _builder.append(_get_5, "\t\t");
              _builder.append("s { get; set; }");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          String _xblockexpression_8 = null;
          {
            ind = (ind + 1);
            _xblockexpression_8 = "";
          }
          _builder.append(_xblockexpression_8, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      String _xblockexpression_9 = null;
      {
        ind = 0;
        _xblockexpression_9 = "";
      }
      _builder.append(_xblockexpression_9, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileViewModels(final DataEntity entity, final ArrayList<String> onetoone1, final ArrayList<String> onetoone2, final ArrayList<String> onetomany1, final ArrayList<String> onetomany2) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System;");
    _builder.newLine();
    _builder.append("using System.Collections.Generic;");
    _builder.newLine();
    _builder.append("using System.ComponentModel;");
    _builder.newLine();
    _builder.append("using System.Linq;");
    _builder.newLine();
    _builder.append("using System.Threading.Tasks;");
    _builder.newLine();
    _builder.append("using Newtonsoft.Json;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace OpenGameListWebApp.ViewModels");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("[JsonObject(MemberSerialization.OptOut)]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class ");
    String _name = entity.getName();
    _builder.append(_name, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("#region Constructor");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public ");
    String _name_1 = entity.getName();
    _builder.append(_name_1, "        ");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("#endregion Constructor");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("#region Properties");
    _builder.newLine();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("        ");
        _builder.append("public ");
        {
          AttributeType _type = attribute.getType();
          String _string = _type.toString();
          boolean _equals = Objects.equal(_string, "Integer");
          if (_equals) {
            _builder.append("int");
          } else {
            AttributeType _type_1 = attribute.getType();
            String _string_1 = _type_1.toString();
            boolean _equals_1 = Objects.equal(_string_1, "Date");
            if (_equals_1) {
              _builder.append("DateTime");
            } else {
              AttributeType _type_2 = attribute.getType();
              _builder.append(_type_2, "        ");
            }
          }
        }
        _builder.append(" ");
        String _name_2 = attribute.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_2);
        _builder.append(_firstUpper, "        ");
        _builder.append(" { get; set; }");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.append("#endregion Properties");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
