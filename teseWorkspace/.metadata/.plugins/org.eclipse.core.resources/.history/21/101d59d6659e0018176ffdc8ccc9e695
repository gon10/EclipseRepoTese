/*
 * generated by Xtext 2.10.0
 */
package org.rslingo.rsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.rslingo.rsl.rsl.Actor
import org.rslingo.rsl.rsl.DataEntity
import java.util.ArrayList
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL.Models.CreateEntitiesLinks
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL .AppDbContext
import org.rslingo.rsl.rsl.UseCase
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RslGenerator extends AbstractGenerator {


	ArrayList<DataEntity> entities = new ArrayList();
	ArrayList<UseCase> useCases = new ArrayList();
	
	ArrayList<String> oneToMany1 = new ArrayList<String>();
	ArrayList<String> oneToMany2 = new ArrayList<String>();
	
	ArrayList<String> oneToOneOrZero1 = new ArrayList<String>();
	ArrayList<String> oneToOneOrZero2 = new ArrayList<String>();
	
	ArrayList<String> ManyToMany1 = new ArrayList<String>();
	ArrayList<String> ManyToMany2 = new ArrayList<String>();
	
	CreateEntitiesLinks cel = new CreateEntitiesLinks("manelasdasdasd");
	int i = 0;
	boolean pode = false;
	
	
	

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))


		for (e : resource.allContents.toIterable.filter(Actor)){
 				fsa.generateFile(
 				"actors/" + e.name + ".java",
 				e.compile)
 			}
 			
 		for(e : resource.allContents.toIterable.filter(DataEntity)){
 			e.createEntityLinks;
 				entities.add(e);
 				for(onem1 : oneToMany1){
 					println("onem1-----------------");
 					println(onem1);
 				}
 				for(onem2 : oneToMany2){
 					println("onem2-----------------");
 					println(onem2);
 				}
 				for(one1 : oneToOneOrZero1){
 					println("one1-----------------");
 					println(one1);
 				}
 				for(one2 : oneToOneOrZero2){
 					println("one2-----------------");
 					println(one2);
 				}
 				for(many1 : ManyToMany1){
 					println("many1-----------------");
 					println(many1);
 				}
 				for(many2 : ManyToMany2){
 					println("many2-----------------");
 					println(many2);
 				}
 				println("___________________________");
 				println("___________________________");
 		}	
 			
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular2/DAL/Models/" + e.name + ".cs",
 				compileEntities(e, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		}
 		
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular2/ViewModels/" + e.name + "ViewModel.cs",
 				compileViewModels(e, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		}
 		
 		for (uc : resource.allContents.toIterable.filter(UseCase)){
 				useCases.add(uc);
 				
 		}
 		
 		fsa.generateFile(	
 		"ASP.NETCoreAngular2/DAL/Core/ApplicationPermissions.cs",
 		compileApplicationPermissions(useCases));  			
 				
 				
 		fsa.generateFile(
 		"ASP.NETCoreAngular2/DAL/ApplicationDbContext" + ".cs",
 		compileAppDb(entities, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		
 		fsa.generateFile(
 		"ASP.NETCoreAngular2/DAL/DatabaseInitializer.cs",
 		compileDatabaseInitializer(useCases));
 				
 				
 		oneToMany1.clear;
		oneToMany2.clear;
		oneToOneOrZero1.clear;
		oneToOneOrZero2.clear;
		ManyToMany1.clear;
		ManyToMany2.clear;
	}
	
	def compileDatabaseInitializer(ArrayList<UseCase> cases) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		using DAL.Models;
		using Microsoft.AspNetCore.Identity;
		using Microsoft.EntityFrameworkCore;
		using Microsoft.Extensions.Logging;
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text;
		using System.Threading.Tasks;
		using DAL.Core;
		using DAL.Core.Interfaces;
		
		namespace DAL
		{
		    public interface IDatabaseInitializer
		    {
		        Task SeedAsync();
		    }
		
		
		
		
		    public class DatabaseInitializer : IDatabaseInitializer
		    {
		        private readonly ApplicationDbContext _context;
		        private readonly IAccountManager _accountManager;
		        private readonly ILogger _logger;
		
		        public DatabaseInitializer(ApplicationDbContext context, IAccountManager accountManager, ILogger<DatabaseInitializer> logger)
		        {
		            _accountManager = accountManager;
		            _context = context;
		            _logger = logger;
		        }
		
		        public async Task SeedAsync()
		        {
		            await _context.Database.MigrateAsync().ConfigureAwait(false);
		
		            if (!await _context.Users.AnyAsync())
		            {
		                _logger.LogInformation("Generating inbuilt accounts");
		
		                const string adminRoleName = "administrator";
		                const string userRoleName = "user";
		                
		                //________feito por mim
		                «var actorsUsed = new ArrayList<String>»
		               	«FOR uc : useCases»
		               	«IF !actorsUsed.contains(uc.actorInitiates.name)»
		               	const string «uc.actorInitiates.name»RoleName = "«uc.actorInitiates.name.toLowerCase»";
		               	«{actorsUsed.add(uc.actorInitiates.name); ""}»
		               	«ENDIF»
		               	«ENDFOR»
		              	//________
		
		                await EnsureRoleAsync(adminRoleName, "Default administrator", ApplicationPermissions.GetAllPermissionValues());
		                await EnsureRoleAsync(userRoleName, "Default user", new string[] { });
		                
		               	//________feito por mim
		               	«var actorsNamesOnUseCases = new ArrayList<String>»
		               	«var actionsToBeUsedByActor = new ArrayList<String>»
		               	«var actorActionMap = new HashMap<String, ArrayList<String>>»
		               	«FOR uc : useCases»
			               	«IF !actorsNamesOnUseCases.contains(uc.actorInitiates.name)»
			               	«{actorsNamesOnUseCases.add(uc.actorInitiates.name); ""}»
			               	«ENDIF»
		               	«ENDFOR»
		               	«FOR actor: actorsNamesOnUseCases»
			               	«FOR uc : useCases»
				               	«IF actor == uc.actorInitiates.name»
				               	 «FOR action : uc.actions.actions»
				               	 	«{actionsToBeUsedByActor.add(action.name + " " + uc.DEntityView.master.masterDEntity.name); ""}»
				               	 	«println("@@@@@@@@@@@@@@@@@@@@@@@@@_______doubleFOR actionsToBeUsedByActor.size " + actionsToBeUsedByActor.size)»
				               	 «ENDFOR»
				               	«ENDIF»
			               	«ENDFOR»
			               	«{actorActionMap.put(actor.toString, actionsToBeUsedByActor); ""}»
			               	«{actionsToBeUsedByActor.clear; ""}»
		               	«ENDFOR»
		               	«println("@@@@@@@@@@@@@@@@@@@@@@@@@_______actionsToBeUsedByActor.size " + actionsToBeUsedByActor.size)»
		               	«FOR mapEntry : actorActionMap.entrySet»
		               	«println("@@@@@@@@@@@@@@@@@@@@:" + mapEntry.key)»
		               	«println("@@@@@@@@@@@@@@@@@@@@:" + mapEntry.value)»
		               	await EnsureRoleAsync(«mapEntry.key»RoleName, "Default «mapEntry.key»", new string[] { «FOR action : mapEntry.value»ApplicationPermissions.GetPermissionByName("«mapEntry.value»s").Value«ENDFOR» });
		               	«ENDFOR»
		               	//________
		
		                await CreateUserAsync("admin", "tempP@ss123", "Inbuilt Administrator", "admin@ebenmonney.com", "+1 (123) 000-0000", new string[] { adminRoleName });
		                await CreateUserAsync("user", "tempP@ss123", "Inbuilt Standard User", "user@ebenmonney.com", "+1 (123) 000-0001", new string[] { userRoleName });
		
		                _logger.LogInformation("Inbuilt account generation completed");
		            }
		
		
		
		            
		        }
		
		
		
		        private async Task EnsureRoleAsync(string roleName, string description, string[] claims)
		        {
		            if ((await _accountManager.GetRoleByNameAsync(roleName)) == null)
		            {
		                ApplicationRole applicationRole = new ApplicationRole(roleName, description);
		
		                var result = await this._accountManager.CreateRoleAsync(applicationRole, claims);
		
		                if (!result.Item1)
		                    throw new Exception($"Seeding \"{description}\" role failed. Errors: {string.Join(Environment.NewLine, result.Item2)}");
		            }
		        }
		
		        private async Task<ApplicationUser> CreateUserAsync(string userName, string password, string fullName, string email, string phoneNumber, string[] roles)
		        {
		            ApplicationUser applicationUser = new ApplicationUser
		            {
		                UserName = userName,
		                FullName = fullName,
		                Email = email,
		                PhoneNumber = phoneNumber,
		                EmailConfirmed = true,
		                IsEnabled = true
		            };
		
		            var result = await _accountManager.CreateUserAsync(applicationUser, roles, password);
		
		            if (!result.Item1)
		                throw new Exception($"Seeding \"{userName}\" user failed. Errors: {string.Join(Environment.NewLine, result.Item2)}");
		
		
		            return applicationUser;
		        }
		    }
		}
		
		'''
	}
	
	def compileApplicationPermissions(ArrayList<UseCase> useCases) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text;
		using System.Threading.Tasks;
		using System.Collections.ObjectModel;
		
		namespace DAL.Core
		{
		    public static class ApplicationPermissions
		    {
		        public static ReadOnlyCollection<ApplicationPermission> AllPermissions;
		
		
		        public const string UsersPermissionGroupName = "User Permissions";
		        public static ApplicationPermission ViewUsers = new ApplicationPermission("View Users", "users.view", UsersPermissionGroupName, "Permission to view other users account details");
		        public static ApplicationPermission ManageUsers = new ApplicationPermission("Manage Users", "users.manage", UsersPermissionGroupName, "Permission to create, delete and modify other users account details");
		
		        public const string RolesPermissionGroupName = "Role Permissions";
		        public static ApplicationPermission ViewRoles = new ApplicationPermission("View Roles", "roles.view", RolesPermissionGroupName, "Permission to view available roles");
		        public static ApplicationPermission ManageRoles = new ApplicationPermission("Manage Roles", "roles.manage", RolesPermissionGroupName, "Permission to create, delete and modify roles");
		        public static ApplicationPermission AssignRoles = new ApplicationPermission("Assign Roles", "roles.assign", RolesPermissionGroupName, "Permission to assign roles to users");
				
				//feito por mim
				«var entitiesUsed = newArrayList»
				«FOR uc : useCases»
				«IF !entitiesUsed.contains(uc.DEntityView.master.masterDEntity.name)»
				public const string «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName = "«uc.DEntityView.master.masterDEntity.name» Permissions";
				public static ApplicationPermission View«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("View «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.view", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to view");
				public static ApplicationPermission Search«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Search «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.search", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to search «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Create«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Create «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.create", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to create «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Update«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Update «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.update", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to update «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Delete«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Delete «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.delete", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to delete «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				«{entitiesUsed.add(uc.DEntityView.master.masterDEntity.name); ""}»
				«ENDIF»
				
				«ENDFOR»
				
		        static ApplicationPermissions()
		        {
		            List<ApplicationPermission> allPermissions = new List<ApplicationPermission>()
		            {
		                ViewUsers,
		                ManageUsers,
		
		                ViewRoles,
		                ManageRoles,
		                AssignRoles,
		                
		                «{entitiesUsed.clear; ""}»
		                «FOR uc : useCases»
		                «IF !entitiesUsed.contains(uc.DEntityView.master.masterDEntity.name)»
		                View«uc.DEntityView.master.masterDEntity.name»s,
		                Search«uc.DEntityView.master.masterDEntity.name»s,
		                Create«uc.DEntityView.master.masterDEntity.name»s,
		                Update«uc.DEntityView.master.masterDEntity.name»s,
		                Delete«uc.DEntityView.master.masterDEntity.name»s«IF uc != useCases.last»,«ENDIF»
		                «{entitiesUsed.add(uc.DEntityView.master.masterDEntity.name); ""}»
		                «ENDIF»
		                
		                «ENDFOR»
		                «{entitiesUsed.clear; ""}»		                		                
		            };
		
		            AllPermissions = allPermissions.AsReadOnly();
		        }
		
		        public static ApplicationPermission GetPermissionByName(string permissionName)
		        {
		            return AllPermissions.Where(p => p.Name == permissionName).FirstOrDefault();
		        }
		
		        public static ApplicationPermission GetPermissionByValue(string permissionValue)
		        {
		            return AllPermissions.Where(p => p.Value == permissionValue).FirstOrDefault();
		        }
		
		        public static string[] GetAllPermissionValues()
		        {
		            return AllPermissions.Select(p => p.Value).ToArray();
		        }
		
		        public static string[] GetAdministrativePermissionValues()
		        {
		            return new string[] { ManageUsers, ManageRoles, AssignRoles };
		        }
		    }
		
		
		
		    public class ApplicationPermission
		    {
		        public ApplicationPermission()
		        { }
		
		        public ApplicationPermission(string name, string value, string groupName, string description = null)
		        {
		            Name = name;
		            Value = value;
		            GroupName = groupName;
		            Description = description;
		        }
		
		
		
		        public string Name { get; set; }
		        public string Value { get; set; }
		        public string GroupName { get; set; }
		        public string Description { get; set; }
		
		
		        public override string ToString()
		        {
		            return Value;
		        }
		
		
		        public static implicit operator string(ApplicationPermission permission)
		        {
		            return permission.Value;
		        }
		    }
		}
		
		
		'''
	}
	
	
	def createEntityLinks(DataEntity entity){
		
		//println(cel.sayHello); 
		
		pode = true;
		for(fk : entity.foreignKeys){
		pode = true;
			//if(entity.checks.size > 0)
			
			for(check : entity.checks){
				var checkExpression = check.checkExpression;
				var splitString = "\\(|\\+|\\)";
		    	var segments = checkExpression.split(splitString).iterator;
		    	if(segments.head == "Unique"){
		    		println("___________check________");
		    		if(fk.refTo.refAttr.get(0).name == segments.head){
		    		oneToOneOrZero1.add(fk.fentity.name);
		    		oneToOneOrZero2.add(entity.name);
		    		
		    		pode = false;
		    		
		    		}
		    	}
			}
		
			//println(entity.checks.get(0));
//			while(i < oneToMany1.size){
//				if((oneToMany1.get(i).equals(entity.name) && oneToMany2.get(i).equals(fk.fentity.name)) && pode){
//					oneToMany1.remove(i);
//					oneToMany2.remove(i);
//					
//					oneToOneOrZero1.add(entity.name);
//					oneToOne2.add(fk.fentity.name);
//					
//					
//					pode = false;
//				}
//				i++	
//			}
//			i=0;
//			while(i < oneToMany2.size){
//				if((oneToMany2.get(i).equals(entity.name) && oneToMany1.get(i).equals(fk.fentity.name)) && pode){
//					oneToMany1.remove(i);
//					oneToMany2.remove(i);
//					
//					oneToOne1.add(entity.name);
//					oneToOne2.add(fk.fentity.name);
//					
//					
//					pode = false;
//				}
//				i++
//			}
			i=0;
			
			if(pode){
			oneToMany1.add(fk.fentity.name);
			oneToMany2.add(entity.name);
			
			}
		}
	}
	
	
	AppDbContext appDbContext = new AppDbContext(entities, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2);
	
	
	def compileAppDb(ArrayList<DataEntity> entities, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		appDbContext.genAppDbContext();
//		var ind = 0;			
//		'''
//		using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
//		using Microsoft.EntityFrameworkCore;
//		using Microsoft.EntityFrameworkCore.Metadata;
//		
//		«FOR ent : entities»
//		using OpenGameListWebApp.Data.«ent.name»s;
//		«ENDFOR»
//		
//		namespace OpenGameListWebApp.Data
//		{
//		    public class ApplicationDbContext : DbContext
//		    {
//		        #region Constructor
//		        public ApplicationDbContext(DbContextOptions options) : base(options)
//		        {
//		        }
//		        #endregion Constructor
//		
//		        #region Methods
//		        protected override void OnModelCreating(ModelBuilder modelBuilder)
//		        {
//		            base.OnModelCreating(modelBuilder);
//		            
//		           	«FOR ent : entities»
//		           	modelBuilder.Entity<«ent.name»>().ToTable("«ent.name»s");
//		           	«FOR otm1 : onetomany1»
//		           	«IF otm1 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetomany2.get(ind)»RP).WithMany(b => b.«ent.name»sRP);«ENDIF»
//		           	«{ind = ind +1; ""}» 
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR otm2 : onetomany2»
//		           	«IF otm2 == ent.name»modelBuilder.Entity<«ent.name»>().HasMany(a => a.«onetomany1.get(ind)»sRP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR oto1 : onetoone1»
//		           	«IF oto1 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetoone2.get(ind)»RP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR oto2 : onetoone2»
//		           	«IF oto2 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetoone1.get(ind)»RP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«ENDFOR»
//		        }
//		        #endregion Methods
//		        
//		        #region Properties
//		        «FOR ent : entities»
//		        public DbSet<«ent.name»> «ent.name»s { get; set; }
//		        «ENDFOR»
//		        #endregion Properties
//		    }
//		}
//		
//		'''
		
	}
				
	def compile(Actor actor){
		'''
		package entities;
		
		public class «actor.name» {
								
			«IF actor.name != null» private String «actor.name» «ENDIF»
			
			«IF actor.type != null» private String «actor.type» «ENDIF»
			
			«IF actor.nameAlias != null» private String «actor.nameAlias» «ENDIF»
			
			«IF actor.super != null» private String «actor.super» «ENDIF»
			
			«IF actor.description != null» private String «actor.description» «ENDIF»
			
		}
		
		
		'''
	}
	
	def compileEntities(DataEntity entity, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		var ind = 0
		'''
		using System;
		using System.Collections.Generic;
		using System.ComponentModel.DataAnnotations;
		using System.ComponentModel.DataAnnotations.Schema;
		
«««		«FOR foreignKey : entity.foreignKeys»
«««		using OpenGameListWebApp.Data.«foreignKey.fentity.name»s;
«««		«ENDFOR»
«««		
«««		«FOR otm2 : onetomany2»
«««		«IF entity.name == otm2»using OpenGameListWebApp.Data.«onetomany1.get(ind1)»s;«ENDIF»
«««		«{ind1 = ind1 + 1; ""}»
«««		«ENDFOR»
«««		«{ind1 = 0; ""}»
		
		«««tem de se meter o "s" no final para ficar em plurar porque no ASP.NETCore para fazer referencia nao pode ter o mesmo nome que a pasta
		«««onde esta a class: Ex pasta E_costumers com a class E_costumer, caso contrario não reconhece o namespace
		
		namespace DAL.Models
		
		{
			public class «entity.name» : AuditableEntity
			{
«««		        #region Constructor
				public «entity.name»()
				{
		
				}
«««		        #endregion Constructor
		
«««		        #region Properties
		«var entrouNoCheck = false»
		«var podeUsarKey = true»
		«var skipPrimaryKey = false»
		«FOR attribute : entity.attributes»
			«{entrouNoCheck = false; ""}»
			«FOR check : entity.checks»				
			«var checkExpression = check.checkExpression»
			«var splitString = "\\(|\\+|\\)"»
			«var segments = checkExpression.split(splitString).iterator»					
			«var uniqueHead = segments.head»
				«IF uniqueHead == "Unique"»
				«{podeUsarKey = false; ""}»
				«var realHead = segments.head»
					«IF realHead == attribute.name »
						«FOR foreingKey : entity.foreignKeys»
							«IF foreingKey.refTo.refAttr.get(0).name == realHead»
								[Key, ForeignKey("«foreingKey.fentity.name»")]
								public int «foreingKey.fentity.name»Id { get; set; }
							«ENDIF»
						«ENDFOR»
						«{entrouNoCheck = true; ""} »	
					«ENDIF»
				«ENDIF»
			«ENDFOR»		
«««				«FOR primarykey : entity.primaryKey.refTo.refAttr»
«««				«IF primarykey.name == attribute.name»[Key]«ENDIF»
«««				«ENDFOR»
«««				[Required]
						«IF entrouNoCheck == false»
								«IF podeUsarKey == true»
									«FOR primarykey : entity.primaryKey.refTo.refAttr»
										«IF primarykey.name == attribute.name»
												[Key]
										«ENDIF»
									«ENDFOR»				
								«ENDIF»
«««						nao funciona com duas fk
								«FOR fk : entity.foreignKeys»
									«IF fk.refTo.refAttr.get(0).name == attribute.name»
										ForeignKey("«fk.fentity.name»")]
									«ENDIF»
								«ENDFOR»
«««				Esta parte serve para ignorar o atributo que esta definido como pk, faz "skip" desse atributo caso haja um "check unique"
						«IF podeUsarKey == false»
							«FOR primarykey : entity.primaryKey.refTo.refAttr»
								«IF primarykey.name == attribute.name»
							«{skipPrimaryKey = true; ""}»
								«ENDIF»
							«ENDFOR»
						«ENDIF»
								«IF skipPrimaryKey == false»
									public «IF attribute.type.toString == "Integer"»int«ELSEIF attribute.type.toString == "Date"»DateTime«ELSE»«attribute.type»«ENDIF» «attribute.name.toFirstUpper» { get; set; }
								«ENDIF»
								«{skipPrimaryKey = false; ""}»
					«ENDIF»
		«ENDFOR»
				«IF entity.description != null»
					public String Description { get; set; }
				«ENDIF»
«««		#endregion Properties
«««		#region Related Properties

				«FOR foreignKey : entity.foreignKeys»
«««		[ForeignKey("«foreignKey.refTo.refAttr.get(0).name.toFirstUpper»")]
«««		public virtual «foreignKey.fentity.name» «foreignKey.fentity.name»RP { get; set; }
					public «foreignKey.fentity.name» «foreignKey.fentity.name» { get; set; }
				«ENDFOR»
		
«««				Isto nao é preciso porque o codigo logo acima faz o mesmo
«««				«FOR otm2 : onetomany2»
«««				«IF entity.name == otm2»public «onetomany1.get(ind)» «onetomany1.get(ind)» { get; set; }«ENDIF»
«««				«{ind = ind + 1; ""}»
«««				«ENDFOR»
«««				«{ind = 0; ""}»

			«FOR otz : oneToOneOrZero1»
				«IF entity.name == otz»
					public «oneToOneOrZero2.get(ind)» «oneToOneOrZero2.get(ind)» { get; set; }
				«ENDIF»
			«{ind = ind + 1; ""}»
			«ENDFOR»
		«{ind = 0; ""}»
		
			«FOR otm1 : onetomany1»
				«IF entity.name == otm1»
					public ICollection<«onetomany2.get(ind)»> «onetomany2.get(ind)»s { get; set; }
				«ENDIF»
			«{ind = ind + 1; ""}»
			«ENDFOR»
		«{ind = 0; ""}»
		
«««				#endregion Related Properties
		
			}
		
		}
		'''
	
	}
	
	def compileViewModels(DataEntity entity, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		
		'''
		using System;
		using System.Collections.Generic;
		using System.ComponentModel;
		using System.Linq;
		using System.Threading.Tasks;
		using Newtonsoft.Json;
		
		namespace OpenGameListWebApp.ViewModels
		{
		    [JsonObject(MemberSerialization.OptOut)]
		    public class «entity.name»
		    {
		        #region Constructor
		        public «entity.name»()
		        {
		
		        }
		        #endregion Constructor
		
		        #region Properties
		        «FOR attribute : entity.attributes»
		        public «IF attribute.type.toString == "Integer"»int«ELSEIF attribute.type.toString == "Date"»DateTime«ELSE»«attribute.type»«ENDIF» «attribute.name.toFirstUpper» { get; set; }
		        «ENDFOR»
		        #endregion Properties
		    }    
		}
		'''
	
	}
	
	
}
