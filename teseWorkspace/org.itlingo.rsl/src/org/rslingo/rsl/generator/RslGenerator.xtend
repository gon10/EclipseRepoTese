/*
 * generated by Xtext 2.10.0
 */
package org.rslingo.rsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.rslingo.rsl.rsl.Actor
import org.rslingo.rsl.rsl.DataEntity
import java.util.ArrayList
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL.Models.CreateEntitiesLinks
import org.rslingo.rsl.generator.Angular5andASP.NET_Core.DAL .AppDbContext
import org.rslingo.rsl.rsl.UseCase
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RslGenerator extends AbstractGenerator {


	ArrayList<DataEntity> entities = new ArrayList();
	ArrayList<UseCase> useCases = new ArrayList();
	
	ArrayList<String> oneToMany1 = new ArrayList<String>();
	ArrayList<String> oneToMany2 = new ArrayList<String>();
	
	ArrayList<String> oneToOneOrZero1 = new ArrayList<String>();
	ArrayList<String> oneToOneOrZero2 = new ArrayList<String>();
	
	ArrayList<String> ManyToMany1 = new ArrayList<String>();
	ArrayList<String> ManyToMany2 = new ArrayList<String>();
	
	CreateEntitiesLinks cel = new CreateEntitiesLinks("manelasdasdasd");
	int i = 0;
	boolean pode = false;
	
	
	

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))


		for (e : resource.allContents.toIterable.filter(Actor)){
 				fsa.generateFile(
 				"actors/" + e.name + ".java",
 				e.compile)
 			}
 			
 		for(e : resource.allContents.toIterable.filter(DataEntity)){
 			e.createEntityLinks;
 				entities.add(e);
 				for(onem1 : oneToMany1){
 					println("onem1-----------------");
 					println(onem1);
 				}
 				for(onem2 : oneToMany2){
 					println("onem2-----------------");
 					println(onem2);
 				}
 				for(one1 : oneToOneOrZero1){
 					println("one1-----------------");
 					println(one1);
 				}
 				for(one2 : oneToOneOrZero2){
 					println("one2-----------------");
 					println(one2);
 				}
 				for(many1 : ManyToMany1){
 					println("many1-----------------");
 					println(many1);
 				}
 				for(many2 : ManyToMany2){
 					println("many2-----------------");
 					println(many2);
 				}
 				println("___________________________");
 				println("___________________________");
 		}	
 			
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular5/DAL/Models/" + e.name + ".cs",
 				compileEntities(e, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		}
 		
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular5/ViewModels/" + e.name + "ViewModel.cs",
 				compileViewModels(e, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		}
 		
 		for (uc : resource.allContents.toIterable.filter(UseCase)){
 				useCases.add(uc);
 				
 		}
 		
 		fsa.generateFile(	
 		"ASP.NETCoreAngular5/DAL/Core/ApplicationPermissions.cs",
 		compileApplicationPermissions(useCases));  			
 				
 				
 		fsa.generateFile(
 		"ASP.NETCoreAngular5/DAL/ApplicationDbContext" + ".cs",
 		compileAppDb(entities, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2))
 		
 		fsa.generateFile(
 		"ASP.NETCoreAngular5/DAL/DatabaseInitializer.cs",
 		compileDatabaseInitializer(useCases));
 		
 		fsa.generateFile(
 		"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/components/settings/settings.component.html",
 		compileSettingsComponentHTML(entities));
 		
 		fsa.generateFile(
 		"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/components/settings/settings.component.ts",
 		compileSettingsComponenTS(entities));
 		
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/components/controls/" + e.name.replace("_", "-").toLowerCase + "-management.component.ts",
 				compileComponentsControlsTS(e))
 		}
 		
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/components/controls/" + e.name.replace("_", "-").toLowerCase + "-management.component.html",
 				compileComponentsControlsHTML(e))
 		}
 		
 		for (e : resource.allContents.toIterable.filter(DataEntity)){
 				fsa.generateFile(	
 				"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/components/controls/" + e.name.replace("_", "-").toLowerCase + "-management.component.css",
 				compileComponentsControlsCSS(e))
 		}
 		
 		fsa.generateFile(
 		"ASP.NETCoreAngular5/QuickApp/ClientApp/src/app/app.module.ts",
 		compileAppModule(entities));
 		
 				
 				
 		oneToMany1.clear;
		oneToMany2.clear;
		oneToOneOrZero1.clear;
		oneToOneOrZero2.clear;
		ManyToMany1.clear;
		ManyToMany2.clear;
	}
	
	def compileAppModule(ArrayList<DataEntity> entities) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		import { NgModule, ErrorHandler } from "@angular/core";
		import { RouterModule } from "@angular/router";
		import { FormsModule } from "@angular/forms";
		import { BrowserModule } from '@angular/platform-browser';
		import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
		import { HttpClientModule } from '@angular/common/http';
		
		import { TranslateModule, TranslateLoader } from "@ngx-translate/core";
		import { NgxDatatableModule } from '@swimlane/ngx-datatable';
		import { ToastaModule } from 'ngx-toasta';
		import { ModalModule } from 'ngx-bootstrap/modal';
		import { TooltipModule } from "ngx-bootstrap/tooltip";
		import { PopoverModule } from "ngx-bootstrap/popover";
		import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
		import { CarouselModule } from 'ngx-bootstrap/carousel';
		import { ChartsModule } from 'ng2-charts';
		
		import { AppRoutingModule } from './app-routing.module';
		import { AppErrorHandler } from './app-error.handler';
		import { AppTitleService } from './services/app-title.service';
		import { AppTranslationService, TranslateLanguageLoader } from './services/app-translation.service';
		import { ConfigurationService } from './services/configuration.service';
		import { AlertService } from './services/alert.service';
		import { LocalStoreManager } from './services/local-store-manager.service';
		import { EndpointFactory } from './services/endpoint-factory.service';
		import { NotificationService } from './services/notification.service';
		import { NotificationEndpoint } from './services/notification-endpoint.service';
		import { AccountService } from './services/account.service';
		import { AccountEndpoint } from './services/account-endpoint.service';
		
		import { EqualValidator } from './directives/equal-validator.directive';
		import { LastElementDirective } from './directives/last-element.directive';
		import { AutofocusDirective } from './directives/autofocus.directive';
		import { BootstrapTabDirective } from './directives/bootstrap-tab.directive';
		import { BootstrapToggleDirective } from './directives/bootstrap-toggle.directive';
		import { BootstrapSelectDirective } from './directives/bootstrap-select.directive';
		import { BootstrapDatepickerDirective } from './directives/bootstrap-datepicker.directive';
		import { GroupByPipe } from './pipes/group-by.pipe';
		
		import { AppComponent } from "./components/app.component";
		import { LoginComponent } from "./components/login/login.component";
		import { HomeComponent } from "./components/home/home.component";
		import { CustomersComponent } from "./components/customers/customers.component";
		import { ProductsComponent } from "./components/products/products.component";
		import { OrdersComponent } from "./components/orders/orders.component";
		import { SettingsComponent } from "./components/settings/settings.component";
		import { AboutComponent } from "./components/about/about.component";
		import { NotFoundComponent } from "./components/not-found/not-found.component";
		
		import { BannerDemoComponent } from "./components/controls/banner-demo.component";
		import { TodoDemoComponent } from "./components/controls/todo-demo.component";
		import { StatisticsDemoComponent } from "./components/controls/statistics-demo.component";
		import { NotificationsViewerComponent } from "./components/controls/notifications-viewer.component";
		import { SearchBoxComponent } from "./components/controls/search-box.component";
		import { UserInfoComponent } from "./components/controls/user-info.component";
		import { UserPreferencesComponent } from "./components/controls/user-preferences.component";
		import { UsersManagementComponent } from "./components/controls/users-management.component";
		import { RolesManagementComponent } from "./components/controls/roles-management.component";
		import { RoleEditorComponent } from "./components/controls/role-editor.component";
		
		//feito por mim
		«FOR entity : entities»import { «entity.name.replace("_", "")»ManagementComponent } from "./components/controls/«entity.name.replace("_", "-").toLowerCase»-management.component";«ENDFOR»
		
		
		
		
		@NgModule({
		  imports: [
		    BrowserModule,
		    BrowserAnimationsModule,
		    HttpClientModule,
		    FormsModule,
		    AppRoutingModule,
		    TranslateModule.forRoot({
		      loader: {
		        provide: TranslateLoader,
		        useClass: TranslateLanguageLoader
		      }
		    }),
		    NgxDatatableModule,
		    ToastaModule.forRoot(),
		    TooltipModule.forRoot(),
		    PopoverModule.forRoot(),
		    BsDropdownModule.forRoot(),
		    CarouselModule.forRoot(),
		    ModalModule.forRoot(),
		    ChartsModule
		  ],
		  declarations: [
		    AppComponent,
		    LoginComponent,
		    HomeComponent,
		    CustomersComponent,
		    ProductsComponent,
		    OrdersComponent,
		    SettingsComponent,
		    UsersManagementComponent, UserInfoComponent, UserPreferencesComponent, «FOR entity : entities»«entity.name.replace("_", "")»ManagementComponent,«ENDFOR»
		    RolesManagementComponent, RoleEditorComponent,
		    AboutComponent,
		    NotFoundComponent,
		    NotificationsViewerComponent,
		    SearchBoxComponent,
		    StatisticsDemoComponent, TodoDemoComponent, BannerDemoComponent,
		    EqualValidator,
		    LastElementDirective,
		    AutofocusDirective,
		    BootstrapTabDirective,
		    BootstrapToggleDirective,
		    BootstrapSelectDirective,
		    BootstrapDatepickerDirective,
		    GroupByPipe
		  ],
		  providers: [
		    { provide: 'BASE_URL', useFactory: getBaseUrl },
		    { provide: ErrorHandler, useClass: AppErrorHandler },
		    AlertService,
		    ConfigurationService,
		    AppTitleService,
		    AppTranslationService,
		    NotificationService,
		    NotificationEndpoint,
		    AccountService,
		    AccountEndpoint,
		    LocalStoreManager,
		    EndpointFactory
		  ],
		  bootstrap: [AppComponent]
		})
		export class AppModule {
		}
		
		
		
		
		export function getBaseUrl() {
		  return document.getElementsByTagName('base')[0].href;
		}
		
		'''
	}
	
	def compileComponentsControlsCSS(DataEntity entity) {
		'''
		.user-role {
		    font-size: 0.8em !important;
		    margin-right: 1px;
		}
		
		.control-box {
		    margin-bottom: 5px;
		}
		
		.search-box {
		    margin: 0;
		}
		
		.action-box {
		    margin: 0 50px 0 0;
		    min-height: 0;
		}
		
		    .action-box .toolbaritem a {
		        padding-top: 5px;
		        padding-bottom: 5px;
		        min-width: 100px;
		    }
		
		
		.user-disabled {
		    color: #777;
		    font-style: italic;
		}
		
		
		.locked-out {
		    background-color: orangered;
		    color: whitesmoke;
		    width: 100%;
		    display: inline-block;
		    padding-left: 5px;
		}
		
		
		@media (max-width: 768px) {
		    .action-box {
		        margin: 0 14px;
		    }
		}
		'''
	}
	
	def compileComponentsControlsHTML(DataEntity entity) {
		'''
		<div>
		    <div class="row control-box">
		        <div class="col-sm-8">
		            <div class="form-group search-box">
		                <search-box (searchChange)="onSearchChanged($event)" placeholder="«entity.name»">></search-box>
		            </div>
		        </div>
		        <div class="col-sm-4">
		            <div class="navbar action-box">
		                <ul class="nav navbar-nav navbar-right">
		                    <li *ngIf="canManageUsers && canAssignRoles" class="toolbaritem">
		                        <a href="javascript:;" (click)="newUser(row)">
		                            <i class="fa fa-plus-circle"></i> New «entity.name»
		                        </a>
		                    </li>
		                </ul>
		            </div>
		        </div>
		    </div>
		
		    <ngx-datatable class="material colored-header sm table table-striped table-hover"
		                   [loadingIndicator]="loadingIndicator"
		                   [rows]="rows"
		                   [rowHeight]="35"
		                   [headerHeight]="35"
		                   [footerHeight]="35"
		                   [columns]="columns"
		                   [scrollbarV]="true"
		                   [columnMode]="'force'">
		    </ngx-datatable>
		
		</div>
		'''
	}
	
	def compileComponentsControlsTS(DataEntity entity) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		import { Component, OnInit, AfterViewInit, TemplateRef, ViewChild, Input } from '@angular/core';
		import { ModalDirective } from 'ngx-bootstrap/modal';
		
		import { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';
		import { AppTranslationService } from "../../services/app-translation.service";
		import { AccountService } from "../../services/account.service";
		import { Utilities } from "../../services/utilities";
		import { User } from '../../models/user.model';
		import { Role } from '../../models/role.model';
		import { Permission } from '../../models/permission.model';
		import { UserEdit } from '../../models/user-edit.model';
		import { UserInfoComponent } from "./user-info.component";
		
		
		@Component({
		    selector: '«entity.name.replace("_", "-").toLowerCase»-management',
		    templateUrl: './«entity.name.replace("_", "-").toLowerCase»-management.component.html',
		    styleUrls: ['./«entity.name.replace("_", "-").toLowerCase»-management.component.css']
		})
		export class «entity.name.replace("_", "")»ManagementComponent implements OnInit{
		    columns: any[] = [];
		    rows: any[] = [];
		
		    loadingIndicator: boolean;
		
		    
		
		    constructor(private alertService: AlertService, private translationService: AppTranslationService, private accountService: AccountService) {
		    }
		
		
		    ngOnInit() {
		
		        let gT = (key: string) => this.translationService.getTranslation(key);
		
		        this.columns = [
		        	«FOR atributo : entity.attributes»
		        	«IF atributo == entity.attributes.last && entity.description == null»
		        	{ prop: '«atributo.name»', name: '«atributo.name»'}
		        	«ELSE»
		        	{ prop: "«atributo.name»", name: '«atributo.name»'},		        	
		        	«ENDIF»		        	
		        	«ENDFOR»
		        	«IF entity.description != null»
		        	{ prop: 'Description', name: 'Description'}
		        	«ENDIF»
		      ];
		
		    }
		}
		'''
	}
	
	
	def compileSettingsComponenTS(ArrayList<DataEntity> entities) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';
		import { ActivatedRoute } from '@angular/router';
		
		
		import { fadeInOut } from '../../services/animations';
		import { BootstrapTabDirective } from "../../directives/bootstrap-tab.directive";
		import { AccountService } from "../../services/account.service";
		import { Permission } from '../../models/permission.model';
		
		
		@Component({
		  selector: 'settings',
		  templateUrl: './settings.component.html',
		  styleUrls: ['./settings.component.css'],
		  animations: [fadeInOut]
		})
		export class SettingsComponent implements OnInit, OnDestroy {
		
		  isProfileActivated = true;
		  isPreferencesActivated = false;
		  isUsersActivated = false;
		  isRolesActivated = false;
		  «FOR entity : entities»
		  is«entity.name»Activated = false;
		  «ENDFOR»
		
		  fragmentSubscription: any;
		
		  readonly profileTab = "profile";
		  readonly preferencesTab = "preferences";
		  readonly usersTab = "users";
		  readonly rolesTab = "roles";
		  «FOR entity : entities»
		  readonly «entity.name»Tab = '«entity.name»';
		  «ENDFOR»
		
		  @ViewChild("tab")
		  tab: BootstrapTabDirective;
		
		
		  constructor(private route: ActivatedRoute, private accountService: AccountService) {
		  }
		
		
		  ngOnInit() {
		    this.fragmentSubscription = this.route.fragment.subscribe(anchor => this.showContent(anchor));
		  }
		
		
		  ngOnDestroy() {
		    this.fragmentSubscription.unsubscribe();
		  }
		
		  showContent(anchor: string) {
		    if ((this.isFragmentEquals(anchor, this.usersTab) && !this.canViewUsers) ||
		      (this.isFragmentEquals(anchor, this.rolesTab) && !this.canViewRoles)
		      «FOR entity : entities»
		      || (this.isFragmentEquals(anchor, this.«entity.name»Tab) && !this.canView«entity.name»)
		      «ENDFOR»
			) {
		      return;
			}
		    this.tab.show(`#${anchor || this.profileTab}Tab`);
		  }
		
		
		  isFragmentEquals(fragment1: string, fragment2: string) {
		
		    if (fragment1 == null)
		      fragment1 = "";
		
		    if (fragment2 == null)
		      fragment2 = "";
		
		    return fragment1.toLowerCase() == fragment2.toLowerCase();
		  }
		
		
		  onShowTab(event) {
		    let activeTab = event.target.hash.split("#", 2).pop();
		
		    this.isProfileActivated = activeTab == this.profileTab;
		    this.isPreferencesActivated = activeTab == this.preferencesTab;
		    this.isUsersActivated = activeTab == this.usersTab;
		    this.isRolesActivated = activeTab == this.rolesTab;
			«FOR entity : entities»
			this.is«entity.name»Activated = activeTab == this.«entity.name»Tab;
			«ENDFOR»
		  }
		
		
		  get canViewUsers() {
		    return this.accountService.userHasPermission(Permission.viewUsersPermission);
		  }
		
		  get canViewRoles() {
		    return this.accountService.userHasPermission(Permission.viewRolesPermission);
		  }
«««		  TODO meter o accoutService
		  «FOR entity : entities»
		  get canView«entity.name»() {
		  		    return true;
		  		  }
		  «ENDFOR»
		}
		'''
	}
	
	def compileSettingsComponentHTML(ArrayList<DataEntity> entities) {
		'''
		<div class="container">
		  <header class="pageHeader">
		    <h3><i class="fa fa-cog fa-lg page-caption" aria-hidden="true"></i> {{'pageHeader.Settings' | translate}}</h3>
		  </header>
		
		  <div [@fadeInOut] class="row">
		    <div class="col-sm-2 side-menu">
		      <ul bootstrapTab #tab="bootstrap-tab" class="nav nav-tabs tabs-left" (showBSTab)="onShowTab($event)">
		        <li class="active">
		          <a id="profileTab" [routerLink]="[]" fragment="profile" href="#profile" data-toggle="tab"><i class="fa fa-user-circle-o fa-fw" aria-hidden="true"></i> {{'settings.tab.Profile' | translate}}</a>
		        </li>
		        <li>
		          <a id="preferencesTab" [routerLink]="[]" fragment="preferences" href="#preferences" data-toggle="tab"><i class="fa fa-sliders fa-fw" aria-hidden="true"></i> {{'settings.tab.Preferences' | translate}}</a>
		        </li>
		        <li [hidden]="!canViewUsers">
		          <a id="usersTab" [routerLink]="[]" fragment="users" href="#users" data-toggle="tab"><i class="fa fa-users fa-fw" aria-hidden="true"></i> {{'settings.tab.Users' | translate}}</a>
		        </li>
		        <li [hidden]="!canViewRoles">
		          <a id="rolesTab" [routerLink]="[]" fragment="roles" href="#roles" data-toggle="tab"><i class="fa fa-shield fa-fw" aria-hidden="true"></i> {{'settings.tab.Roles' | translate}}</a>
		        </li>
		        «FOR entity : entities»
		        <li [hidden]="!canView«entity.name»">
		          <a id="«entity.name»Tab" [routerLink]="[]" fragment="«entity.name»" href="#«entity.name»" data-toggle="tab"><i class="fa fa-file-code-o fa-fw" aria-hidden="true"></i> «entity.name»</a>
		        </li>
		        «ENDFOR»
		      </ul>
		    </div>
		    <div class="col-sm-10">
		      <div class="tab-content">
		        <div class="tab-pane active" id="profile">
		          <h4>{{'settings.header.UserProfile' | translate}}</h4>
		          <hr class="separator-hr" />
		          <div [@fadeInOut] *ngIf="isProfileActivated" class="content-container">
		            <user-info></user-info>
		          </div>
		        </div>
		
		        <div class="tab-pane" id="preferences">
		          <h4>{{'settings.header.UserPreferences' | translate}}</h4>
		          <hr class="separator-hr" />
		          <div [@fadeInOut] *ngIf="isPreferencesActivated" class="content-container">
		            <user-preferences></user-preferences>
		          </div>
		        </div>
		
		        <div class="tab-pane" id="users">
		          <h4>{{'settings.header.UsersManagements' | translate}}</h4>
		          <hr class="separator-hr" />
		          <div [@fadeInOut] *ngIf="canViewUsers && isUsersActivated" class="content-container">
		            <users-management></users-management>
		          </div>
		        </div>
		
		        <div class="tab-pane" id="roles">
		          <h4>{{'settings.header.RolesManagement' | translate}}</h4>
		          <hr class="separator-hr" />
		          <div [@fadeInOut] *ngIf="canViewRoles && isRolesActivated" class="content-container">
		            <roles-management></roles-management>
		          </div>
		        </div>
		        
		        «FOR entity : entities»
		        <div class="tab-pane" id="«entity.name»">
		          <h4>«entity.name»</h4>
		          <hr class="separator-hr" />
		          <div [@fadeInOut] *ngIf="canView«entity.name» && is«entity.name»Activated" class="content-container">
		        	<«entity.name.replace("_", "-").toLowerCase»-management></«entity.name.replace("_", "-").toLowerCase»-management>
		          </div>
		        </div>
		        «ENDFOR»
		      </div>
		    </div>
		  </div>
		</div>
		'''
	}
	
	def compileDatabaseInitializer(ArrayList<UseCase> cases) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		using DAL.Models;
		using Microsoft.AspNetCore.Identity;
		using Microsoft.EntityFrameworkCore;
		using Microsoft.Extensions.Logging;
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text;
		using System.Threading.Tasks;
		using DAL.Core;
		using DAL.Core.Interfaces;
		
		namespace DAL
		{
		    public interface IDatabaseInitializer
		    {
		        Task SeedAsync();
		    }
		
		
		
		
		    public class DatabaseInitializer : IDatabaseInitializer
		    {
		        private readonly ApplicationDbContext _context;
		        private readonly IAccountManager _accountManager;
		        private readonly ILogger _logger;
		
		        public DatabaseInitializer(ApplicationDbContext context, IAccountManager accountManager, ILogger<DatabaseInitializer> logger)
		        {
		            _accountManager = accountManager;
		            _context = context;
		            _logger = logger;
		        }
		
		        public async Task SeedAsync()
		        {
		            await _context.Database.MigrateAsync().ConfigureAwait(false);
		
		            if (!await _context.Users.AnyAsync())
		            {
		                _logger.LogInformation("Generating inbuilt accounts");
		
		                const string adminRoleName = "administrator";
		                const string userRoleName = "user";
		                
		                //________feito por mim
		                «var actorsUsed = new ArrayList<String>»
		               	«FOR uc : useCases»
		               	«IF !actorsUsed.contains(uc.actorInitiates.name)»
		               	const string «uc.actorInitiates.name»RoleName = "«uc.actorInitiates.name.toLowerCase»";
		               	«{actorsUsed.add(uc.actorInitiates.name); ""}»
		               	«ENDIF»
		               	«ENDFOR»
		              	//________
		
		                await EnsureRoleAsync(adminRoleName, "Default administrator", ApplicationPermissions.GetAllPermissionValues());
		                await EnsureRoleAsync(userRoleName, "Default user", new string[] { });
		                
		               	//________feito por mim
		               	«var actorsNamesOnUseCases = new ArrayList<String>»
		               	«FOR uc : useCases»
			               	«IF !actorsNamesOnUseCases.contains(uc.actorInitiates.name)»
			               	«{actorsNamesOnUseCases.add(uc.actorInitiates.name); ""}»
			               	«ENDIF»
		               	«ENDFOR»
		               	«var actionsToBeUsedByActor = new ArrayList<String>»
		               	«var actorActionMap = new HashMap<String, ArrayList<String>>»
		               	«FOR actor: actorsNamesOnUseCases»
			               	«FOR uc : useCases»
				               	«IF actor == uc.actorInitiates.name»
				               	 «FOR action : uc.actions.actions»
				               	 	«IF !actionsToBeUsedByActor.contains(action.name + " " + uc.DEntityView.master.masterDEntity.name)»
				               	 	«{actionsToBeUsedByActor.add(action.name + " " + uc.DEntityView.master.masterDEntity.name); ""}»
				               	 	«ENDIF»
				               	 «ENDFOR»
				               	«ENDIF»
			               	«ENDFOR»
			               	«var tempactionsToBeUsedByActor = new ArrayList<String>»
			               	«FOR action : actionsToBeUsedByActor»
			               	«{tempactionsToBeUsedByActor.add(action); ""}»
			               	«ENDFOR»
			               	«{actorActionMap.put(actor.toString, tempactionsToBeUsedByActor); ""}»
			               	«{actionsToBeUsedByActor.clear; ""}»
		               	«ENDFOR»
		               	«FOR mapEntry : actorActionMap.entrySet»
		               	await EnsureRoleAsync(«mapEntry.key»RoleName, "Default «mapEntry.key»", new string[] { «FOR action : mapEntry.value»«var splitString = " "»«var segments = action.split(splitString).iterator» «var segmentsHead = segments.head» «IF segmentsHead == "Search"»ApplicationPermissions.GetPermissionByName("«action»s").Value,«ELSEIF segmentsHead == "Create"»ApplicationPermissions.GetPermissionByName("«action»s").Value,«ELSEIF segmentsHead == "View"»ApplicationPermissions.GetPermissionByName("«action»s").Value,«ELSEIF segmentsHead == "Update"»ApplicationPermissions.GetPermissionByName("«action»s").Value,«ELSEIF segmentsHead == "Delete"»ApplicationPermissions.GetPermissionByName("«action»s").Value,«ENDIF»«ENDFOR» });
		               	«ENDFOR»
		               	//________
		
		                await CreateUserAsync("admin", "tempP@ss123", "Inbuilt Administrator", "admin@ebenmonney.com", "+1 (123) 000-0000", new string[] { adminRoleName });
		                await CreateUserAsync("user", "tempP@ss123", "Inbuilt Standard User", "user@ebenmonney.com", "+1 (123) 000-0001", new string[] { userRoleName });
		
						//________feito por mim
						«var actorsForCreateUserAsync = new ArrayList<String>»
						«FOR uc : useCases»
						«IF !actorsForCreateUserAsync.contains(uc.actorInitiates.name)»
						await CreateUserAsync("«uc.actorInitiates.name»", "tempP@ss123", "Inbuilt «uc.actorInitiates.name»", "«uc.actorInitiates.name»@ebenmonney.com", "012345", new string[] { «uc.actorInitiates.name»RoleName });
						«{actorsForCreateUserAsync.add(uc.actorInitiates.name); ""}»
						«ENDIF»
						«ENDFOR»
						//________
		
		                _logger.LogInformation("Inbuilt account generation completed");
		            }
		
		
		
		            
		        }
		
		
		
		        private async Task EnsureRoleAsync(string roleName, string description, string[] claims)
		        {
		            if ((await _accountManager.GetRoleByNameAsync(roleName)) == null)
		            {
		                ApplicationRole applicationRole = new ApplicationRole(roleName, description);
		
		                var result = await this._accountManager.CreateRoleAsync(applicationRole, claims);
		
		                if (!result.Item1)
		                    throw new Exception($"Seeding \"{description}\" role failed. Errors: {string.Join(Environment.NewLine, result.Item2)}");
		            }
		        }
		
		        private async Task<ApplicationUser> CreateUserAsync(string userName, string password, string fullName, string email, string phoneNumber, string[] roles)
		        {
		            ApplicationUser applicationUser = new ApplicationUser
		            {
		                UserName = userName,
		                FullName = fullName,
		                Email = email,
		                PhoneNumber = phoneNumber,
		                EmailConfirmed = true,
		                IsEnabled = true
		            };
		
		            var result = await _accountManager.CreateUserAsync(applicationUser, roles, password);
		
		            if (!result.Item1)
		                throw new Exception($"Seeding \"{userName}\" user failed. Errors: {string.Join(Environment.NewLine, result.Item2)}");
		
		
		            return applicationUser;
		        }
		    }
		}
		
		'''
	}
	
	def compileApplicationPermissions(ArrayList<UseCase> useCases) {
		'''
		// ====================================================
		// More Templates: https://www.ebenmonney.com/templates
		// Email: support@ebenmonney.com
		// ====================================================
		
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text;
		using System.Threading.Tasks;
		using System.Collections.ObjectModel;
		
		namespace DAL.Core
		{
		    public static class ApplicationPermissions
		    {
		        public static ReadOnlyCollection<ApplicationPermission> AllPermissions;
		
		
		        public const string UsersPermissionGroupName = "User Permissions";
		        public static ApplicationPermission ViewUsers = new ApplicationPermission("View Users", "users.view", UsersPermissionGroupName, "Permission to view other users account details");
		        public static ApplicationPermission ManageUsers = new ApplicationPermission("Manage Users", "users.manage", UsersPermissionGroupName, "Permission to create, delete and modify other users account details");
		
		        public const string RolesPermissionGroupName = "Role Permissions";
		        public static ApplicationPermission ViewRoles = new ApplicationPermission("View Roles", "roles.view", RolesPermissionGroupName, "Permission to view available roles");
		        public static ApplicationPermission ManageRoles = new ApplicationPermission("Manage Roles", "roles.manage", RolesPermissionGroupName, "Permission to create, delete and modify roles");
		        public static ApplicationPermission AssignRoles = new ApplicationPermission("Assign Roles", "roles.assign", RolesPermissionGroupName, "Permission to assign roles to users");
				
				//feito por mim
				«var entitiesUsed = newArrayList»
				«FOR uc : useCases»
				«IF !entitiesUsed.contains(uc.DEntityView.master.masterDEntity.name)»
				public const string «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName = "«uc.DEntityView.master.masterDEntity.name» Permissions";
				public static ApplicationPermission View«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("View «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.view", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to view");
				public static ApplicationPermission Search«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Search «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.search", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to search «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Create«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Create «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.create", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to create «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Update«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Update «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.update", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to update «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				public static ApplicationPermission Delete«uc.DEntityView.master.masterDEntity.name»s = new ApplicationPermission("Delete «uc.DEntityView.master.masterDEntity.name»s", "«uc.DEntityView.master.masterDEntity.name.toLowerCase»s.delete", «uc.DEntityView.master.masterDEntity.name»sPermissionGroupName, "Permission to delete «uc.DEntityView.master.masterDEntity.name.toLowerCase»s");
				«{entitiesUsed.add(uc.DEntityView.master.masterDEntity.name); ""}»
				«ENDIF»
				
				«ENDFOR»
				
		        static ApplicationPermissions()
		        {
		            List<ApplicationPermission> allPermissions = new List<ApplicationPermission>()
		            {
		                ViewUsers,
		                ManageUsers,
		
		                ViewRoles,
		                ManageRoles,
		                AssignRoles,
		                
		                «{entitiesUsed.clear; ""}»
		                «FOR uc : useCases»
		                «IF !entitiesUsed.contains(uc.DEntityView.master.masterDEntity.name)»
		                View«uc.DEntityView.master.masterDEntity.name»s,
		                Search«uc.DEntityView.master.masterDEntity.name»s,
		                Create«uc.DEntityView.master.masterDEntity.name»s,
		                Update«uc.DEntityView.master.masterDEntity.name»s,
		                Delete«uc.DEntityView.master.masterDEntity.name»s«IF uc != useCases.last»,«ENDIF»
		                «{entitiesUsed.add(uc.DEntityView.master.masterDEntity.name); ""}»
		                «ENDIF»
		                
		                «ENDFOR»
		                «{entitiesUsed.clear; ""}»		                		                
		            };
		
		            AllPermissions = allPermissions.AsReadOnly();
		        }
		
		        public static ApplicationPermission GetPermissionByName(string permissionName)
		        {
		            return AllPermissions.Where(p => p.Name == permissionName).FirstOrDefault();
		        }
		
		        public static ApplicationPermission GetPermissionByValue(string permissionValue)
		        {
		            return AllPermissions.Where(p => p.Value == permissionValue).FirstOrDefault();
		        }
		
		        public static string[] GetAllPermissionValues()
		        {
		            return AllPermissions.Select(p => p.Value).ToArray();
		        }
		
		        public static string[] GetAdministrativePermissionValues()
		        {
		            return new string[] { ManageUsers, ManageRoles, AssignRoles };
		        }
		    }
		
		
		
		    public class ApplicationPermission
		    {
		        public ApplicationPermission()
		        { }
		
		        public ApplicationPermission(string name, string value, string groupName, string description = null)
		        {
		            Name = name;
		            Value = value;
		            GroupName = groupName;
		            Description = description;
		        }
		
		
		
		        public string Name { get; set; }
		        public string Value { get; set; }
		        public string GroupName { get; set; }
		        public string Description { get; set; }
		
		
		        public override string ToString()
		        {
		            return Value;
		        }
		
		
		        public static implicit operator string(ApplicationPermission permission)
		        {
		            return permission.Value;
		        }
		    }
		}
		
		
		'''
	}
	
	
	def createEntityLinks(DataEntity entity){
		
		//println(cel.sayHello); 
		
		pode = true;
		for(fk : entity.foreignKeys){
		pode = true;
			//if(entity.checks.size > 0)
			
			for(check : entity.checks){
				var checkExpression = check.checkExpression;
				var splitString = "\\(|\\+|\\)";
		    	var segments = checkExpression.split(splitString).iterator;
		    	if(segments.head == "Unique"){
		    		println("___________check________");
		    		if(fk.refTo.refAttr.get(0).name == segments.head){
		    		oneToOneOrZero1.add(fk.fentity.name);
		    		oneToOneOrZero2.add(entity.name);
		    		
		    		pode = false;
		    		
		    		}
		    	}
			}
		
			//println(entity.checks.get(0));
//			while(i < oneToMany1.size){
//				if((oneToMany1.get(i).equals(entity.name) && oneToMany2.get(i).equals(fk.fentity.name)) && pode){
//					oneToMany1.remove(i);
//					oneToMany2.remove(i);
//					
//					oneToOneOrZero1.add(entity.name);
//					oneToOne2.add(fk.fentity.name);
//					
//					
//					pode = false;
//				}
//				i++	
//			}
//			i=0;
//			while(i < oneToMany2.size){
//				if((oneToMany2.get(i).equals(entity.name) && oneToMany1.get(i).equals(fk.fentity.name)) && pode){
//					oneToMany1.remove(i);
//					oneToMany2.remove(i);
//					
//					oneToOne1.add(entity.name);
//					oneToOne2.add(fk.fentity.name);
//					
//					
//					pode = false;
//				}
//				i++
//			}
			i=0;
			
			if(pode){
			oneToMany1.add(fk.fentity.name);
			oneToMany2.add(entity.name);
			
			}
		}
	}
	
	
	AppDbContext appDbContext = new AppDbContext(entities, oneToOneOrZero1, oneToOneOrZero2, oneToMany1, oneToMany2);
	
	
	def compileAppDb(ArrayList<DataEntity> entities, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		appDbContext.genAppDbContext();
//		var ind = 0;			
//		'''
//		using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
//		using Microsoft.EntityFrameworkCore;
//		using Microsoft.EntityFrameworkCore.Metadata;
//		
//		«FOR ent : entities»
//		using OpenGameListWebApp.Data.«ent.name»s;
//		«ENDFOR»
//		
//		namespace OpenGameListWebApp.Data
//		{
//		    public class ApplicationDbContext : DbContext
//		    {
//		        #region Constructor
//		        public ApplicationDbContext(DbContextOptions options) : base(options)
//		        {
//		        }
//		        #endregion Constructor
//		
//		        #region Methods
//		        protected override void OnModelCreating(ModelBuilder modelBuilder)
//		        {
//		            base.OnModelCreating(modelBuilder);
//		            
//		           	«FOR ent : entities»
//		           	modelBuilder.Entity<«ent.name»>().ToTable("«ent.name»s");
//		           	«FOR otm1 : onetomany1»
//		           	«IF otm1 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetomany2.get(ind)»RP).WithMany(b => b.«ent.name»sRP);«ENDIF»
//		           	«{ind = ind +1; ""}» 
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR otm2 : onetomany2»
//		           	«IF otm2 == ent.name»modelBuilder.Entity<«ent.name»>().HasMany(a => a.«onetomany1.get(ind)»sRP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR oto1 : onetoone1»
//		           	«IF oto1 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetoone2.get(ind)»RP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«FOR oto2 : onetoone2»
//		           	«IF oto2 == ent.name»modelBuilder.Entity<«ent.name»>().HasOne(a => a.«onetoone1.get(ind)»RP).WithOne(b => b.«ent.name»RP);«ENDIF»
//		           	«{ind = ind + 1; ""}»
//		           	«ENDFOR»
//		           	«{ind = 0; ""}»
//		           	«ENDFOR»
//		        }
//		        #endregion Methods
//		        
//		        #region Properties
//		        «FOR ent : entities»
//		        public DbSet<«ent.name»> «ent.name»s { get; set; }
//		        «ENDFOR»
//		        #endregion Properties
//		    }
//		}
//		
//		'''
		
	}
				
	def compile(Actor actor){
		'''
		package entities;
		
		public class «actor.name» {
								
			«IF actor.name != null» private String «actor.name» «ENDIF»
			
			«IF actor.type != null» private String «actor.type» «ENDIF»
			
			«IF actor.nameAlias != null» private String «actor.nameAlias» «ENDIF»
			
			«IF actor.super != null» private String «actor.super» «ENDIF»
			
			«IF actor.description != null» private String «actor.description» «ENDIF»
			
		}
		
		
		'''
	}
	
	def compileEntities(DataEntity entity, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		var ind = 0
		'''
		using System;
		using System.Collections.Generic;
		using System.ComponentModel.DataAnnotations;
		using System.ComponentModel.DataAnnotations.Schema;
		
«««		«FOR foreignKey : entity.foreignKeys»
«««		using OpenGameListWebApp.Data.«foreignKey.fentity.name»s;
«««		«ENDFOR»
«««		
«««		«FOR otm2 : onetomany2»
«««		«IF entity.name == otm2»using OpenGameListWebApp.Data.«onetomany1.get(ind1)»s;«ENDIF»
«««		«{ind1 = ind1 + 1; ""}»
«««		«ENDFOR»
«««		«{ind1 = 0; ""}»
		
		«««tem de se meter o "s" no final para ficar em plurar porque no ASP.NETCore para fazer referencia nao pode ter o mesmo nome que a pasta
		«««onde esta a class: Ex pasta E_costumers com a class E_costumer, caso contrario não reconhece o namespace
		
		namespace DAL.Models
		
		{
			public class «entity.name»
			{
«««		        #region Constructor
				public «entity.name»()
				{
		
				}
«««		        #endregion Constructor
		
«««		        #region Properties
		«var entrouNoCheck = false»
		«var podeUsarKey = true»
		«var skipPrimaryKey = false»
		«FOR attribute : entity.attributes»
			«{entrouNoCheck = false; ""}»
			«FOR check : entity.checks»				
			«var checkExpression = check.checkExpression»
			«var splitString = "\\(|\\+|\\)"»
			«var segments = checkExpression.split(splitString).iterator»					
			«var uniqueHead = segments.head»
				«IF uniqueHead == "Unique"»
				«{podeUsarKey = false; ""}»
				«var realHead = segments.head»
					«IF realHead == attribute.name »
						«FOR foreingKey : entity.foreignKeys»
							«IF foreingKey.refTo.refAttr.get(0).name == realHead»
								[Key, ForeignKey("«foreingKey.fentity.name»")]
								public int «foreingKey.fentity.name»Id { get; set; }
							«ENDIF»
						«ENDFOR»
						«{entrouNoCheck = true; ""} »	
					«ENDIF»
				«ENDIF»
			«ENDFOR»		
«««				«FOR primarykey : entity.primaryKey.refTo.refAttr»
«««				«IF primarykey.name == attribute.name»[Key]«ENDIF»
«««				«ENDFOR»
«««				[Required]
						«IF entrouNoCheck == false»
								«IF podeUsarKey == true»
									«FOR primarykey : entity.primaryKey.refTo.refAttr»
										«IF primarykey.name == attribute.name»
												[Key]
										«ENDIF»
									«ENDFOR»				
								«ENDIF»
«««						nao funciona com duas fk
								«FOR fk : entity.foreignKeys»
									«IF fk.refTo.refAttr.get(0).name == attribute.name»
										[ForeignKey("«fk.fentity.name»")]
									«ENDIF»
								«ENDFOR»
«««				Esta parte serve para ignorar o atributo que esta definido como pk, faz "skip" desse atributo caso haja um "check unique"
						«IF podeUsarKey == false»
							«FOR primarykey : entity.primaryKey.refTo.refAttr»
								«IF primarykey.name == attribute.name»
							«{skipPrimaryKey = true; ""}»
								«ENDIF»
							«ENDFOR»
						«ENDIF»
								«IF skipPrimaryKey == false»
									public «IF attribute.type.toString == "Integer"»int«ELSEIF attribute.type.toString == "Date"»DateTime«ELSE»«attribute.type»«ENDIF» «attribute.name.toFirstUpper» { get; set; }
								«ENDIF»
								«{skipPrimaryKey = false; ""}»
					«ENDIF»
		«ENDFOR»
				«IF entity.description != null»
					public String Description { get; set; }
				«ENDIF»
«««		#endregion Properties
«««		#region Related Properties

				«FOR foreignKey : entity.foreignKeys»
«««		[ForeignKey("«foreignKey.refTo.refAttr.get(0).name.toFirstUpper»")]
«««		public virtual «foreignKey.fentity.name» «foreignKey.fentity.name»RP { get; set; }
					public «foreignKey.fentity.name» «foreignKey.fentity.name» { get; set; }
				«ENDFOR»
		
«««				Isto nao é preciso porque o codigo logo acima faz o mesmo
«««				«FOR otm2 : onetomany2»
«««				«IF entity.name == otm2»public «onetomany1.get(ind)» «onetomany1.get(ind)» { get; set; }«ENDIF»
«««				«{ind = ind + 1; ""}»
«««				«ENDFOR»
«««				«{ind = 0; ""}»

			«FOR otz : oneToOneOrZero1»
				«IF entity.name == otz»
					public «oneToOneOrZero2.get(ind)» «oneToOneOrZero2.get(ind)» { get; set; }
				«ENDIF»
			«{ind = ind + 1; ""}»
			«ENDFOR»
		«{ind = 0; ""}»
		
			«FOR otm1 : onetomany1»
				«IF entity.name == otm1»
					public ICollection<«onetomany2.get(ind)»> «onetomany2.get(ind)»s { get; set; }
				«ENDIF»
			«{ind = ind + 1; ""}»
			«ENDFOR»
		«{ind = 0; ""}»
		
«««				#endregion Related Properties
		
			}
		
		}
		'''
	
	}
	
	def compileViewModels(DataEntity entity, ArrayList<String> onetoone1, ArrayList<String> onetoone2, ArrayList<String> onetomany1, ArrayList<String> onetomany2){
		
		'''
		using System;
		using System.Collections.Generic;
		using System.ComponentModel;
		using System.Linq;
		using System.Threading.Tasks;
		using Newtonsoft.Json;
		
		namespace OpenGameListWebApp.ViewModels
		{
		    [JsonObject(MemberSerialization.OptOut)]
		    public class «entity.name»
		    {
		        #region Constructor
		        public «entity.name»()
		        {
		
		        }
		        #endregion Constructor
		
		        #region Properties
		        «FOR attribute : entity.attributes»
		        public «IF attribute.type.toString == "Integer"»int«ELSEIF attribute.type.toString == "Date"»DateTime«ELSE»«attribute.type»«ENDIF» «attribute.name.toFirstUpper» { get; set; }
		        «ENDFOR»
		        #endregion Properties
		    }    
		}
		'''
	
	}
	
	
}
