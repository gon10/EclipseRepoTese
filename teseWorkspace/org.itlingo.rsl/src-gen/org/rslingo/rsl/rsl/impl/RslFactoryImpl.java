/**
 * generated by Xtext 2.10.0
 */
package org.rslingo.rsl.rsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.rslingo.rsl.rsl.Actor;
import org.rslingo.rsl.rsl.ActorType;
import org.rslingo.rsl.rsl.Attribute;
import org.rslingo.rsl.rsl.AttributeType;
import org.rslingo.rsl.rsl.Check;
import org.rslingo.rsl.rsl.DataEntity;
import org.rslingo.rsl.rsl.DataEntitySubType;
import org.rslingo.rsl.rsl.DataEntityType;
import org.rslingo.rsl.rsl.DataEntityView;
import org.rslingo.rsl.rsl.DataEntityViewType;
import org.rslingo.rsl.rsl.Date;
import org.rslingo.rsl.rsl.DetailDEntity;
import org.rslingo.rsl.rsl.ForeignKey;
import org.rslingo.rsl.rsl.IfStep;
import org.rslingo.rsl.rsl.Import;
import org.rslingo.rsl.rsl.MasterDEntity;
import org.rslingo.rsl.rsl.Model;
import org.rslingo.rsl.rsl.Month;
import org.rslingo.rsl.rsl.Multiplicity;
import org.rslingo.rsl.rsl.PackageAbstract;
import org.rslingo.rsl.rsl.PackageSystem;
import org.rslingo.rsl.rsl.PrimaryKey;
import org.rslingo.rsl.rsl.PriorityType;
import org.rslingo.rsl.rsl.RefActor;
import org.rslingo.rsl.rsl.RefAttribute;
import org.rslingo.rsl.rsl.RefDEntity;
import org.rslingo.rsl.rsl.RefSystem;
import org.rslingo.rsl.rsl.RefUC;
import org.rslingo.rsl.rsl.RefUCAction;
import org.rslingo.rsl.rsl.ReferenceDEntity;
import org.rslingo.rsl.rsl.Requirement;
import org.rslingo.rsl.rsl.RequirementRelation;
import org.rslingo.rsl.rsl.RequirementRelationType;
import org.rslingo.rsl.rsl.RslFactory;
import org.rslingo.rsl.rsl.RslPackage;
import org.rslingo.rsl.rsl.Scenario;
import org.rslingo.rsl.rsl.ScenarioType;
import org.rslingo.rsl.rsl.SimpleStep;
import org.rslingo.rsl.rsl.State;
import org.rslingo.rsl.rsl.StateMachine;
import org.rslingo.rsl.rsl.StateMachineType;
import org.rslingo.rsl.rsl.States;
import org.rslingo.rsl.rsl.Step;
import org.rslingo.rsl.rsl.StepOperationSubType;
import org.rslingo.rsl.rsl.StepOperationType;
import org.rslingo.rsl.rsl.SystemRelation;
import org.rslingo.rsl.rsl.SystemRelationCategory;
import org.rslingo.rsl.rsl.SystemRelationType;
import org.rslingo.rsl.rsl.SystemRequirement;
import org.rslingo.rsl.rsl.SystemScope;
import org.rslingo.rsl.rsl.SystemType;
import org.rslingo.rsl.rsl.UCAction;
import org.rslingo.rsl.rsl.UCActions;
import org.rslingo.rsl.rsl.UCExtends;
import org.rslingo.rsl.rsl.UCExtensionPoint;
import org.rslingo.rsl.rsl.UCExtensionPoints;
import org.rslingo.rsl.rsl.UCIncludes;
import org.rslingo.rsl.rsl.UseCase;
import org.rslingo.rsl.rsl.UseCaseType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RslFactoryImpl extends EFactoryImpl implements RslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RslFactory init()
  {
    try
    {
      RslFactory theRslFactory = (RslFactory)EPackage.Registry.INSTANCE.getEFactory(RslPackage.eNS_URI);
      if (theRslFactory != null)
      {
        return theRslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RslPackage.MODEL: return createModel();
      case RslPackage.PACKAGE_ABSTRACT: return createPackageAbstract();
      case RslPackage.IMPORT: return createImport();
      case RslPackage.DATE: return createDate();
      case RslPackage.MONTH: return createMonth();
      case RslPackage.PACKAGE_SYSTEM: return createPackageSystem();
      case RslPackage.SYSTEM: return createSystem();
      case RslPackage.REF_SYSTEM: return createRefSystem();
      case RslPackage.SYSTEM_RELATION: return createSystemRelation();
      case RslPackage.DATA_ENTITY: return createDataEntity();
      case RslPackage.ATTRIBUTE: return createAttribute();
      case RslPackage.MULTIPLICITY: return createMultiplicity();
      case RslPackage.PRIMARY_KEY: return createPrimaryKey();
      case RslPackage.FOREIGN_KEY: return createForeignKey();
      case RslPackage.REF_ATTRIBUTE: return createRefAttribute();
      case RslPackage.CHECK: return createCheck();
      case RslPackage.DATA_ENTITY_VIEW: return createDataEntityView();
      case RslPackage.MASTER_DENTITY: return createMasterDEntity();
      case RslPackage.DETAIL_DENTITY: return createDetailDEntity();
      case RslPackage.REFERENCE_DENTITY: return createReferenceDEntity();
      case RslPackage.REF_DENTITY: return createRefDEntity();
      case RslPackage.ACTOR: return createActor();
      case RslPackage.REQUIREMENT: return createRequirement();
      case RslPackage.SYSTEM_REQUIREMENT: return createSystemRequirement();
      case RslPackage.REQUIREMENT_RELATION: return createRequirementRelation();
      case RslPackage.USE_CASE: return createUseCase();
      case RslPackage.REF_ACTOR: return createRefActor();
      case RslPackage.UC_ACTIONS: return createUCActions();
      case RslPackage.UC_ACTION: return createUCAction();
      case RslPackage.UC_INCLUDES: return createUCIncludes();
      case RslPackage.UC_EXTENDS: return createUCExtends();
      case RslPackage.UC_EXTENSION_POINTS: return createUCExtensionPoints();
      case RslPackage.UC_EXTENSION_POINT: return createUCExtensionPoint();
      case RslPackage.REF_UC: return createRefUC();
      case RslPackage.SCENARIO: return createScenario();
      case RslPackage.STEP: return createStep();
      case RslPackage.SIMPLE_STEP: return createSimpleStep();
      case RslPackage.IF_STEP: return createIfStep();
      case RslPackage.STATE_MACHINE: return createStateMachine();
      case RslPackage.STATES: return createStates();
      case RslPackage.STATE: return createState();
      case RslPackage.REF_UC_ACTION: return createRefUCAction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RslPackage.SYSTEM_TYPE:
        return createSystemTypeFromString(eDataType, initialValue);
      case RslPackage.SYSTEM_SCOPE:
        return createSystemScopeFromString(eDataType, initialValue);
      case RslPackage.SYSTEM_RELATION_TYPE:
        return createSystemRelationTypeFromString(eDataType, initialValue);
      case RslPackage.SYSTEM_RELATION_CATEGORY:
        return createSystemRelationCategoryFromString(eDataType, initialValue);
      case RslPackage.DATA_ENTITY_TYPE:
        return createDataEntityTypeFromString(eDataType, initialValue);
      case RslPackage.DATA_ENTITY_SUB_TYPE:
        return createDataEntitySubTypeFromString(eDataType, initialValue);
      case RslPackage.ATTRIBUTE_TYPE:
        return createAttributeTypeFromString(eDataType, initialValue);
      case RslPackage.DATA_ENTITY_VIEW_TYPE:
        return createDataEntityViewTypeFromString(eDataType, initialValue);
      case RslPackage.ACTOR_TYPE:
        return createActorTypeFromString(eDataType, initialValue);
      case RslPackage.PRIORITY_TYPE:
        return createPriorityTypeFromString(eDataType, initialValue);
      case RslPackage.REQUIREMENT_RELATION_TYPE:
        return createRequirementRelationTypeFromString(eDataType, initialValue);
      case RslPackage.USE_CASE_TYPE:
        return createUseCaseTypeFromString(eDataType, initialValue);
      case RslPackage.SCENARIO_TYPE:
        return createScenarioTypeFromString(eDataType, initialValue);
      case RslPackage.STEP_OPERATION_TYPE:
        return createStepOperationTypeFromString(eDataType, initialValue);
      case RslPackage.STEP_OPERATION_SUB_TYPE:
        return createStepOperationSubTypeFromString(eDataType, initialValue);
      case RslPackage.STATE_MACHINE_TYPE:
        return createStateMachineTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RslPackage.SYSTEM_TYPE:
        return convertSystemTypeToString(eDataType, instanceValue);
      case RslPackage.SYSTEM_SCOPE:
        return convertSystemScopeToString(eDataType, instanceValue);
      case RslPackage.SYSTEM_RELATION_TYPE:
        return convertSystemRelationTypeToString(eDataType, instanceValue);
      case RslPackage.SYSTEM_RELATION_CATEGORY:
        return convertSystemRelationCategoryToString(eDataType, instanceValue);
      case RslPackage.DATA_ENTITY_TYPE:
        return convertDataEntityTypeToString(eDataType, instanceValue);
      case RslPackage.DATA_ENTITY_SUB_TYPE:
        return convertDataEntitySubTypeToString(eDataType, instanceValue);
      case RslPackage.ATTRIBUTE_TYPE:
        return convertAttributeTypeToString(eDataType, instanceValue);
      case RslPackage.DATA_ENTITY_VIEW_TYPE:
        return convertDataEntityViewTypeToString(eDataType, instanceValue);
      case RslPackage.ACTOR_TYPE:
        return convertActorTypeToString(eDataType, instanceValue);
      case RslPackage.PRIORITY_TYPE:
        return convertPriorityTypeToString(eDataType, instanceValue);
      case RslPackage.REQUIREMENT_RELATION_TYPE:
        return convertRequirementRelationTypeToString(eDataType, instanceValue);
      case RslPackage.USE_CASE_TYPE:
        return convertUseCaseTypeToString(eDataType, instanceValue);
      case RslPackage.SCENARIO_TYPE:
        return convertScenarioTypeToString(eDataType, instanceValue);
      case RslPackage.STEP_OPERATION_TYPE:
        return convertStepOperationTypeToString(eDataType, instanceValue);
      case RslPackage.STEP_OPERATION_SUB_TYPE:
        return convertStepOperationSubTypeToString(eDataType, instanceValue);
      case RslPackage.STATE_MACHINE_TYPE:
        return convertStateMachineTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageAbstract createPackageAbstract()
  {
    PackageAbstractImpl packageAbstract = new PackageAbstractImpl();
    return packageAbstract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Month createMonth()
  {
    MonthImpl month = new MonthImpl();
    return month;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageSystem createPackageSystem()
  {
    PackageSystemImpl packageSystem = new PackageSystemImpl();
    return packageSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.rslingo.rsl.rsl.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefSystem createRefSystem()
  {
    RefSystemImpl refSystem = new RefSystemImpl();
    return refSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemRelation createSystemRelation()
  {
    SystemRelationImpl systemRelation = new SystemRelationImpl();
    return systemRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataEntity createDataEntity()
  {
    DataEntityImpl dataEntity = new DataEntityImpl();
    return dataEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity createMultiplicity()
  {
    MultiplicityImpl multiplicity = new MultiplicityImpl();
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryKey createPrimaryKey()
  {
    PrimaryKeyImpl primaryKey = new PrimaryKeyImpl();
    return primaryKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForeignKey createForeignKey()
  {
    ForeignKeyImpl foreignKey = new ForeignKeyImpl();
    return foreignKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefAttribute createRefAttribute()
  {
    RefAttributeImpl refAttribute = new RefAttributeImpl();
    return refAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataEntityView createDataEntityView()
  {
    DataEntityViewImpl dataEntityView = new DataEntityViewImpl();
    return dataEntityView;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MasterDEntity createMasterDEntity()
  {
    MasterDEntityImpl masterDEntity = new MasterDEntityImpl();
    return masterDEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DetailDEntity createDetailDEntity()
  {
    DetailDEntityImpl detailDEntity = new DetailDEntityImpl();
    return detailDEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceDEntity createReferenceDEntity()
  {
    ReferenceDEntityImpl referenceDEntity = new ReferenceDEntityImpl();
    return referenceDEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefDEntity createRefDEntity()
  {
    RefDEntityImpl refDEntity = new RefDEntityImpl();
    return refDEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemRequirement createSystemRequirement()
  {
    SystemRequirementImpl systemRequirement = new SystemRequirementImpl();
    return systemRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementRelation createRequirementRelation()
  {
    RequirementRelationImpl requirementRelation = new RequirementRelationImpl();
    return requirementRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase createUseCase()
  {
    UseCaseImpl useCase = new UseCaseImpl();
    return useCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefActor createRefActor()
  {
    RefActorImpl refActor = new RefActorImpl();
    return refActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCActions createUCActions()
  {
    UCActionsImpl ucActions = new UCActionsImpl();
    return ucActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCAction createUCAction()
  {
    UCActionImpl ucAction = new UCActionImpl();
    return ucAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCIncludes createUCIncludes()
  {
    UCIncludesImpl ucIncludes = new UCIncludesImpl();
    return ucIncludes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCExtends createUCExtends()
  {
    UCExtendsImpl ucExtends = new UCExtendsImpl();
    return ucExtends;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCExtensionPoints createUCExtensionPoints()
  {
    UCExtensionPointsImpl ucExtensionPoints = new UCExtensionPointsImpl();
    return ucExtensionPoints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCExtensionPoint createUCExtensionPoint()
  {
    UCExtensionPointImpl ucExtensionPoint = new UCExtensionPointImpl();
    return ucExtensionPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefUC createRefUC()
  {
    RefUCImpl refUC = new RefUCImpl();
    return refUC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStep createSimpleStep()
  {
    SimpleStepImpl simpleStep = new SimpleStepImpl();
    return simpleStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStep createIfStep()
  {
    IfStepImpl ifStep = new IfStepImpl();
    return ifStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public States createStates()
  {
    StatesImpl states = new StatesImpl();
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefUCAction createRefUCAction()
  {
    RefUCActionImpl refUCAction = new RefUCActionImpl();
    return refUCAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemType createSystemTypeFromString(EDataType eDataType, String initialValue)
  {
    SystemType result = SystemType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSystemTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemScope createSystemScopeFromString(EDataType eDataType, String initialValue)
  {
    SystemScope result = SystemScope.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSystemScopeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemRelationType createSystemRelationTypeFromString(EDataType eDataType, String initialValue)
  {
    SystemRelationType result = SystemRelationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSystemRelationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemRelationCategory createSystemRelationCategoryFromString(EDataType eDataType, String initialValue)
  {
    SystemRelationCategory result = SystemRelationCategory.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSystemRelationCategoryToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataEntityType createDataEntityTypeFromString(EDataType eDataType, String initialValue)
  {
    DataEntityType result = DataEntityType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataEntityTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataEntitySubType createDataEntitySubTypeFromString(EDataType eDataType, String initialValue)
  {
    DataEntitySubType result = DataEntitySubType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataEntitySubTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeType createAttributeTypeFromString(EDataType eDataType, String initialValue)
  {
    AttributeType result = AttributeType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAttributeTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataEntityViewType createDataEntityViewTypeFromString(EDataType eDataType, String initialValue)
  {
    DataEntityViewType result = DataEntityViewType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataEntityViewTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActorType createActorTypeFromString(EDataType eDataType, String initialValue)
  {
    ActorType result = ActorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PriorityType createPriorityTypeFromString(EDataType eDataType, String initialValue)
  {
    PriorityType result = PriorityType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPriorityTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementRelationType createRequirementRelationTypeFromString(EDataType eDataType, String initialValue)
  {
    RequirementRelationType result = RequirementRelationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRequirementRelationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCaseType createUseCaseTypeFromString(EDataType eDataType, String initialValue)
  {
    UseCaseType result = UseCaseType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUseCaseTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScenarioType createScenarioTypeFromString(EDataType eDataType, String initialValue)
  {
    ScenarioType result = ScenarioType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertScenarioTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StepOperationType createStepOperationTypeFromString(EDataType eDataType, String initialValue)
  {
    StepOperationType result = StepOperationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStepOperationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StepOperationSubType createStepOperationSubTypeFromString(EDataType eDataType, String initialValue)
  {
    StepOperationSubType result = StepOperationSubType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStepOperationSubTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateMachineType createStateMachineTypeFromString(EDataType eDataType, String initialValue)
  {
    StateMachineType result = StateMachineType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateMachineTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RslPackage getRslPackage()
  {
    return (RslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RslPackage getPackage()
  {
    return RslPackage.eINSTANCE;
  }

} //RslFactoryImpl
